!function(){"use strict";function config(){}angular.module("guh.logging.hooks",[]).config(config),config.$inject=[]}(),function(){"use strict";function guhLoggingHttpHook(){function _checkParameter(parameterName,parameter){try{if(!angular.isDefined(parameter)||null===parameter)throw"The parameter "+parameterName+" has to be defined.";if(!angular.isString(parameter))throw"The value of "+parameterName+" has to be a string."}catch(error){return}}function _setServerAddress(){locationServer=locationProtocol+"//"+locationHost+":"+locationPort}function $get($http){return function(logObject){$http.post(locationServer,{data:logObject}).then(function(response){console.log("Data successfully sent.",{payload:logObject,response:response})})["catch"](function(error){console.log("Data not sent.",{payload:logObject,error:error})})}}function setProtocol(protocol){_checkParameter("protocol",protocol),locationProtocol=protocol,_setServerAddress()}function setHostname(hostname){_checkParameter("hostname",hostname),locationHost=hostname,_setServerAddress()}function setPort(port){_checkParameter("port",port),locationPort=port,_setServerAddress()}function getServer(){return locationServer}var locationProtocol=location.protocol,locationHost=location.hostname,locationPort=location.port,locationServer=locationProtocol+"//"+locationHost+":"+locationPort,provider={$get:["$http",$get],getServer:getServer,setProtocol:setProtocol,setHostname:setHostname,setPort:setPort};return provider}angular.module("guh.logging.hooks").provider("guhLoggingHttpHook",guhLoggingHttpHook)}(),function(){"use strict";function guhLoggingBroadcastHook(){function $get($rootScope){return function(logObject){var type=logObject.type?logObject.type:null,argsArray=logObject.args?[].slice.call(logObject.args):null;if(angular.isArray(argsArray))switch(argsArray.length){case 1:angular.isString(argsArray[0])||$rootScope.$broadcast("notification",{type:type,args:argsArray[0]});break;case 2:$rootScope.$broadcast("notification",{type:type,context:argsArray[0],args:argsArray[1]});break;default:console.log("Wrong number of arguments.",logObject.type,logObject.args,argsArray.length)}}}var provider={$get:["$rootScope",$get]};return provider}angular.module("guh.logging.hooks").provider("guhLoggingBroadcastHook",guhLoggingBroadcastHook)}(),function(){"use strict";function config(DSHttpAdapterProvider,DSProvider,app){DSHttpAdapterProvider.defaults.log=!1,DSHttpAdapterProvider.defaults.deserialize=function(resourceConfig,data){return data&&"data"in data?data.data:data},DSProvider.defaults.basePath=app.apiUrl,DSProvider.defaults.debug=!1}angular.module("guh.models",["js-data"]).config(config),config.$inject=["DSHttpAdapterProvider","DSProvider","app"]}(),function(){"use strict";function DSVendorFactory($log,$q,DS,websocketService){function load(){return websocketService.send({method:"Devices.GetSupportedVendors"}).then(function(data){return DSVendor.inject(data.vendors),DSVendor.getAll()})}var DSVendor=DS.defineResource({endpoint:"vendors",idAttribute:"id",name:"vendor",relations:{hasMany:{deviceClass:{localField:"deviceClasses",foreignKey:"vendorId"}}},computed:{},methods:{}});return angular.extend(DSVendor,{load:load}),DSVendor}angular.module("guh.models").factory("DSVendor",DSVendorFactory).run(function(DSVendor){}),DSVendorFactory.$inject=["$log","$q","DS","websocketService"]}(),function(){"use strict";function DSStateTypeFactory($log,DS,modelsHelper){function _addUiData(resource,attrs){var regExp=/\s\[([^)]+)\]/,searchUnit=name.replace(regExp,""),phrase=attrs.name;regExp.test(name)&&(phrase=searchUnit),attrs.phrase="When value of "+phrase,attrs=modelsHelper.addUiData(attrs)}var DSStateType=DS.defineResource({endpoint:"statetypes",idAttribute:"id",name:"stateType",relations:{hasMany:{deviceClassStateType:{localField:"deviceClassStateTypes",foreignKey:"stateTypeId"}}},computed:{},methods:{},afterInject:function(resource,attrs){if(angular.isArray(attrs)){var arrayOfAttrs=attrs;angular.forEach(arrayOfAttrs,function(attrs){_addUiData(resource,attrs)})}else _addUiData(resource,attrs)}});return DSStateType}angular.module("guh.models").factory("DSStateType",DSStateTypeFactory).run(function(DSStateType){}),DSStateTypeFactory.$inject=["$log","DS","modelsHelper"]}(),function(){"use strict";function DSStateFactory($log,$q,DS,websocketService){function load(deviceId){return websocketService.send({method:"Devices.GetStateValues",params:{deviceId:deviceId}}).then(function(data){var states=data.values.map(function(state){return state.deviceId=deviceId,state});return DSState.inject(states),DSState.getAll()})}var DSState=DS.defineResource({endpoint:"states",idAttribute:"compoundId",name:"state",relations:{belongsTo:{device:{localField:"device",localKey:"deviceId",parent:!0}},hasOne:{stateType:{localField:"stateType",localKey:"stateTypeId"}}},computed:{compoundId:["deviceId","stateTypeId","value",function(deviceId,stateTypeId,value){return""+deviceId+"_"+stateTypeId}]},methods:{}});return angular.extend(DSState,{load:load}),DSState}angular.module("guh.models").factory("DSState",DSStateFactory).run(function(DSState){}),DSStateFactory.$inject=["$log","$q","DS","websocketService"]}(),function(){"use strict";function DSRuleFactory($log,$q,app,DS,websocketService){function _loadDetails(ruleDescription){return websocketService.send({method:"Rules.GetRuleDetails",params:{ruleId:ruleDescription.id}})}function load(){return websocketService.send({method:"Rules.GetRules"}).then(function(data){return $q.all(data.ruleDescriptions.map(function(ruleDescription){return _loadDetails(ruleDescription).then(function(data){return DSRule.inject(data.rule),data.rule})}))}).then(function(rules){return DSRule.getAll()})}function add(rule){return websocketService.send({method:"Rules.AddRule",params:rule})}function executeActions(){var self=this;return websocketService.send({method:"Rules.ExecuteActions",params:{ruleId:self.id}})}function executeExitActions(){var self=this;return websocketService.send({method:"Rules.ExecuteExitActions",params:{ruleId:self.id}})}function remove(){var self=this;return websocketService.send({method:"Rules.RemoveRule",params:{ruleId:self.id}})}var DSRule=DS.defineResource({endpoint:"rules",idAttribute:"id",name:"rule",relations:{},computed:{},methods:{executeActions:executeActions,executeExitActions:executeExitActions,remove:remove}});return angular.extend(DSRule,{load:load,add:add}),DSRule}angular.module("guh.models").factory("DSRule",DSRuleFactory).run(function(DSRule){}),DSRuleFactory.$inject=["$log","$q","app","DS","websocketService"]}(),function(){"use strict";function DSPluginFactory($log,$q,DS,websocketService){function load(){return websocketService.send({method:"Devices.GetPlugins"}).then(function(data){return DSPlugin.inject(data.plugins),DSPlugin.getAll()})}var DSPlugin=DS.defineResource({endpoint:"plugins",idAttribute:"id",name:"plugin",relations:{},computed:{},methods:{}});return angular.extend(DSPlugin,{load:load}),DSPlugin}angular.module("guh.models").factory("DSPlugin",DSPluginFactory).run(function(DSPlugin){}),DSPluginFactory.$inject=["$log","$q","DS","websocketService"]}(),function(){"use strict";function DSParamTypeFactory($log,DS){var DSParamType=DS.defineResource({name:"paramType",relations:{belongsTo:{deviceClass:{localField:"deviceClass",localKey:"deviceClassId"}}},computed:{},methods:{}});return DSParamType}angular.module("guh.models").factory("DSParamType",DSParamTypeFactory).run(function(DSParamType){}),DSParamTypeFactory.$inject=["$log","DS"]}(),function(){"use strict";function modelsHelper($log,$q,DS,File,app){function _getInputPath(folderName,directiveName,filename){return directiveName?app.basePaths.ui+folderName+"/"+directiveName+"-templates/"+filename+app.fileExtensions.html:app.basePaths.ui+folderName+"/templates/"+filename+app.fileExtensions.html}function _getActionTemplate(actionType){var paramTypes=void 0===actionType.paramTypes?null:actionType.paramTypes,folderName="form",directiveName="form-field";angular.isArray(paramTypes)?0===paramTypes.length?actionType.templateUrl=_getInputPath(folderName,directiveName,directiveName+"-button"):actionType.templateUrl=void 0:$log.warn("guh.models.modelsHelper | The property paramTypes is not of type Array.",guhType)}function _getInputTemplate(guhType,isChildOfActionType){var template,allowedValues=void 0===guhType.allowedValues?null:guhType.allowedValues,possibleValues=void 0===guhType.possibleValues?null:guhType.possibleValues,inputType=void 0===guhType.inputType?null:guhType.inputType,type=void 0===guhType.type?null:guhType.type,folderName="form",directiveName="form-field";switch(type){case"Bool":template=isChildOfActionType?_getInputPath(folderName,directiveName,directiveName+"-toggle-button"):_getInputPath(folderName,directiveName,directiveName+"-checkbox");break;case"Int":case"Uint":template=isChildOfActionType?_getInputPath(folderName,directiveName,directiveName+"-range"):_getInputPath(folderName,directiveName,directiveName+"-number-integer");break;case"Double":template=isChildOfActionType?_getInputPath(folderName,directiveName,directiveName+"-range"):_getInputPath(folderName,directiveName,directiveName+"-number-decimal");break;case"Color":template=_getInputPath(folderName,directiveName,directiveName+"-color");break;case"String":template=allowedValues||possibleValues?isChildOfActionType?_getInputPath(folderName,directiveName,directiveName+"-select"):_getInputPath(folderName,directiveName,directiveName+"-select"):inputType?_getInputPath(folderName,directiveName,directiveName+app.inputTypes[inputType]):_getInputPath(folderName,directiveName,directiveName+"-text");break;default:template=_getInputPath(folderName,directiveName,"template-not-available")}return template}function addUiData(guhType,isChildOfActionType){var type;return DS.is("actionType",guhType)?(guhType.actionTemplateUrl=_getActionTemplate(guhType),type="actionType"):DS.is("stateType",guhType)?(isChildOfActionType=!1,guhType.inputTemplateUrl=_getInputTemplate(guhType,isChildOfActionType),type="stateType"):(guhType.inputTemplateUrl=_getInputTemplate(guhType,isChildOfActionType),type="paramType"),guhType}function checkTemplateUrl(templateUrl){var pathElements=templateUrl.split("/"),file=pathElements.pop(),path=pathElements.join("/")+"/";if(void 0!==templateUrl&&""!==templateUrl){var fileExists=$q.when(File.checkFile(path,file)).then(function(fileExists){return fileExists?templateUrl:path+"template-not-available.html"});return fileExists}return path+"template-not-defined.html"}function setBasePath(){DS.defaults.basePath=app.apiUrl}var modelsHelper={addUiData:addUiData,checkTemplateUrl:checkTemplateUrl,setBasePath:setBasePath};return modelsHelper}angular.module("guh.models").factory("modelsHelper",modelsHelper),modelsHelper.$inject=["$log","$q","DS","File","app"]}(),function(){"use strict";function DSEventTypeFactory($log,DS,modelsHelper){function _addUiData(resource,attrs){var paramTypes=attrs.paramTypes,phrase="When "+attrs.name;angular.isArray(paramTypes)&&0===paramTypes.length?attrs.phrase=phrase+" is detected":attrs.phrase=phrase+" is detected and parameters are",angular.forEach(paramTypes,function(paramType){paramType=modelsHelper.addUiData(paramType)})}function getParamDescriptor(paramType,value,operator){var paramDescriptor={};return paramDescriptor={name:paramType.name,operator:operator,value:value}}var DSEventType=DS.defineResource({endpoint:"eventtypes",idAttribute:"id",name:"eventType",relations:{belongsTo:{deviceClass:{localField:"deviceClass",localKey:"deviceClassId",parent:!0}}},computed:{},methods:{getParamDescriptor:getParamDescriptor},afterInject:function(resource,attrs){if(angular.isArray(attrs)){var arrayOfAttrs=attrs;angular.forEach(arrayOfAttrs,function(attrs){_addUiData(resource,attrs)})}else _addUiData(resource,attrs)}});return DSEventType}angular.module("guh.models").factory("DSEventType",DSEventTypeFactory).run(function(DSEventType){}),DSEventTypeFactory.$inject=["$log","DS","modelsHelper"]}(),function(){"use strict";function DSDeviceFactory($log,$q,DS,libs,app,websocketService){function _createStates(resource,attrs){var deviceId=attrs.id,states=attrs.states;angular.forEach(states,function(state,index){state.deviceId=deviceId;var stateInstance=DS.createInstance("state",state);DS.inject("state",stateInstance),angular.isUndefined(attrs.states)&&(attrs.states=[]),attrs.states[index]=DS.get("state",""+deviceId+"_"+state.stateTypeId)})}function _removeStates(resource,attrs){var deviceId=attrs.id,states=attrs.states;angular.forEach(states,function(state,index){var ejectedItem=DS.eject("state",""+deviceId+"_"+state.stateTypeId);$log.log("ejected state",ejectedItem)})}function load(){return websocketService.send({method:"Devices.GetConfiguredDevices"}).then(function(data){return DSDevice.inject(data.devices),DSDevice.getAll()})}function getDescription(delimiter){var self=this,vendorName=self.deviceClass.vendor.name,deviceClassName=self.deviceClass.name||"";return delimiter=delimiter||"-",vendorName===deviceClassName?deviceClassName:vendorName+delimiter+deviceClassName}function pair(deviceClassId,deviceDescriptorId,deviceParams,name){var params={};return params.deviceClassId=deviceClassId||"",angular.isDefined(deviceDescriptorId)&&""!==deviceDescriptorId?params.deviceDescriptorId=deviceDescriptorId:params.deviceParams=deviceParams||[],angular.isDefined(name)&&(params.name=name),websocketService.send({method:"Devices.PairDevice",params:params})}function confirmPairing(pairingTransactionId,secret){var params={};return params.pairingTransactionId=pairingTransactionId,secret&&(params.secret=secret),websocketService.send({method:"Devices.ConfirmPairing",params:params})}function add(deviceClassId,deviceDescriptorId,deviceParams,name){var params={};return angular.isDefined(name)&&""!==name&&(params.name=name),angular.isDefined(deviceClassId)&&""!==deviceClassId&&(params.deviceClassId=deviceClassId),angular.isDefined(deviceDescriptorId)&&""!==deviceDescriptorId?params.deviceDescriptorId=deviceDescriptorId:angular.isDefined(deviceParams)&&deviceParams!==[]&&(params.deviceParams=deviceParams),websocketService.send({method:"Devices.AddConfiguredDevice",params:params})}function edit(deviceId,deviceData){var device={};return deviceData=deviceData||{},device.deviceDescriptorId=deviceData.id||"",device.deviceParams=[],angular.forEach(deviceData.deviceParamTypes,function(deviceParamType){var deviceParam={};deviceParam.name=deviceParamType.name,deviceParam.value=deviceParamType.value,device.deviceParams.push(deviceParam)}),DSDevice.update(deviceId,{device:device})}function executeAction(actionType,params){var self=this,jsonRpcParams={actionTypeId:actionType.id,deviceId:self.id};return angular.isDefined(params)&&params!=={}&&(jsonRpcParams.params=params),websocketService.send({method:"Actions.ExecuteAction",params:jsonRpcParams})}function remove(params){var self=this,jsonRpcParams={deviceId:self.id};return angular.isDefined(params)&&params!=={}&&(jsonRpcParams.params=params),websocketService.send({method:"Devices.RemoveConfiguredDevice",params:jsonRpcParams})}function getEventDescriptor(eventType,paramDescriptors){var self=this,eventDescriptor={};return eventDescriptor.deviceId=self.id,eventDescriptor.eventTypeId=eventType.id,angular.isDefined(paramDescriptors)&&paramDescriptors.length>0&&(eventDescriptor.paramDescriptors=paramDescriptors),eventDescriptor}function getStateDescriptor(stateType,paramDescriptor){var self=this,stateDescriptor={};return stateDescriptor.deviceId=self.id,stateDescriptor.operator=paramDescriptor.operator,stateDescriptor.stateTypeId=stateType.id,stateDescriptor.value=paramDescriptor.value,stateDescriptor}function getAction(actionType,params){var self=this,action={},ruleActionParams=[];return ruleActionParams=actionType.getRuleActionParams(params),ruleActionParams.length>0&&(action.ruleActionParams=ruleActionParams),action.actionTypeId=actionType.id,action.deviceId=self.id,action}var DSDevice=DS.defineResource({endpoint:"devices",idAttribute:"id",name:"device",relations:{belongsTo:{deviceClass:{localField:"deviceClass",localKey:"deviceClassId"}}},computed:{},methods:{executeAction:executeAction,remove:remove,getDescription:getDescription,getEventDescriptor:getEventDescriptor,getStateDescriptor:getStateDescriptor,getAction:getAction},afterInject:function(resource,attrs){if(angular.isArray(attrs)){var arrayOfAttrs=attrs;angular.forEach(arrayOfAttrs,function(attrs){_createStates(resource,attrs)})}else _createStates(resource,attrs)},afterEject:function(resource,attrs){if(angular.isArray(attrs)){var arrayOfAttrs=attrs;angular.forEach(arrayOfAttrs,function(attrs){_removeStates(resource,attrs)})}else _removeStates(resource,attrs)}});return angular.extend(DSDevice,{load:load,add:add,edit:edit,pair:pair,confirmPairing:confirmPairing}),DSDevice}angular.module("guh.models").factory("DSDevice",DSDeviceFactory).run(function(DSDevice){}),DSDeviceFactory.$inject=["$log","$q","DS","libs","app","websocketService"]}(),function(){"use strict";function DSDeviceClassStateTypeFactory($log,DS,modelsHelper){var DSDeviceClassStateType=DS.defineResource({name:"deviceClassStateType",relations:{belongsTo:{deviceClass:{localField:"deviceClass",localKey:"deviceClassId"},stateType:{localField:"stateType",localKey:"stateTypeId"}}}});return DSDeviceClassStateType}angular.module("guh.models").factory("DSDeviceClassStateType",DSDeviceClassStateTypeFactory).run(function(DSDeviceClassStateType){}),DSDeviceClassStateTypeFactory.$inject=["$log","DS","modelsHelper"]}(),function(){"use strict";function DSDeviceClassFactory($log,$q,DS,app,libs,websocketService,modelsHelper,DSDeviceClassActionType,DSDeviceClassEventType,DSDeviceClassStateType){function load(){return websocketService.send({method:"Devices.GetSupportedDevices"}).then(function(data){return DSDeviceClass.inject(data.deviceClasses),DSDeviceClass.getAll()})}function _getInputPath(name,filename){var classType=_getClassType(name);return"device"===classType||"gateway"===classType?app.basePaths.devices+"detail/device-class-templates/"+filename+app.fileExtensions.html:"service"===classType||"dev-service"===classType?app.basePaths.services+"detail/device-class-templates/"+filename+app.fileExtensions.html:""}function _addUiTemplate(name){var templateName=name.toLowerCase().replace(/\s/g,"-").replace(/([.*+?^=!:${}()|\[\]\/\\])/g,""),templateUrl=_getInputPath(name,"device-class-"+templateName);return modelsHelper.checkTemplateUrl(templateUrl)}function _createDeviceClassActionsTypes(resource,attrs){var deviceClassActionTypes=DS.getAll("deviceClassActionType"),deviceClassEventTypes=DS.getAll("deviceClassEventType"),deviceClassStateTypes=DS.getAll("deviceClassStateType"),actionTypes=attrs.actionTypes,eventTypes=attrs.eventTypes,stateTypes=attrs.stateTypes,deviceClassId=attrs.id;angular.forEach(actionTypes,function(actionType){var actionTypeInstance=DS.createInstance("actionType",actionType);DS.inject("actionType",actionTypeInstance);var deviceClassActionTypesFiltered=deviceClassActionTypes.filter(function(deviceClassActionType){return deviceClassActionType.deviceClassId===deviceClassId&&deviceClassActionType.actionTypeId===actionType.id});if(angular.isArray(deviceClassActionTypesFiltered)&&0===deviceClassActionTypesFiltered.length){deviceClassActionTypesId+=1;var deviceClassActionTypeInstance=DS.createInstance("deviceClassActionType",{id:deviceClassActionTypesId,deviceClassId:deviceClassId,actionTypeId:actionType.id});DS.inject("deviceClassActionType",deviceClassActionTypeInstance)}}),angular.forEach(eventTypes,function(eventType){var eventTypeInstance=DS.createInstance("eventType",eventType);DS.inject("eventType",eventTypeInstance);var deviceClassEventTypesFiltered=deviceClassEventTypes.filter(function(deviceClassEventType){return deviceClassEventType.deviceClassId===deviceClassId&&deviceClassEventType.eventTypeId===eventType.id});if(angular.isArray(deviceClassEventTypesFiltered)&&0===deviceClassEventTypesFiltered.length){deviceClassEventTypesId+=1;var deviceClassEventTypeInstance=DS.createInstance("deviceClassEventType",{id:deviceClassEventTypesId,deviceClassId:deviceClassId,eventTypeId:eventType.id});DS.inject("deviceClassEventType",deviceClassEventTypeInstance)}}),angular.forEach(stateTypes,function(stateType){var stateTypeInstance=DS.createInstance("stateType",stateType);DS.inject("stateType",stateTypeInstance);var deviceClassStateTypesFiltered=deviceClassStateTypes.filter(function(deviceClassStateType){return deviceClassStateType.deviceClassId===deviceClassId&&deviceClassStateType.stateTypeId===stateType.id});if(angular.isArray(deviceClassStateTypesFiltered)&&0===deviceClassStateTypesFiltered.length){deviceClassStateTypesId+=1;var deviceClassStateTypeInstance=DS.createInstance("deviceClassStateType",{id:deviceClassStateTypesId,deviceClassId:deviceClassId,stateTypeId:stateType.id});DS.inject("deviceClassStateType",deviceClassStateTypeInstance)}})}function _addUiData(resource,attrs){var discoveryParamTypes=attrs.discoveryParamTypes,paramTypes=attrs.paramTypes;attrs=modelsHelper.addUiData(attrs),angular.forEach(discoveryParamTypes,function(paramType){paramType=modelsHelper.addUiData(paramType)}),angular.forEach(paramTypes,function(paramType){paramType=modelsHelper.addUiData(paramType)})}function _getClassType(name){var devServices=["Mock Device","Mock Device (Auto created)","Mock Device (Child)","Mock Device (Display Pin)","Mock Device (Parent)","Mock Device (Push Button)"],gateways=["Hue Bridge"],moods=["Mood"],services=["aWATTar","Alarm","Application launcher","Bashscript launcher","Button","Countdown","Custom mail","Google mail","Kodi","ON/OFF Button","Today","Toggle Button","UDP Commander","Wake On Lan","Weather","Yahoo mail"],classType="device";return libs._.contains(devServices,name)?classType="dev-service":libs._.contains(moods,name)?classType="mood":libs._.contains(gateways,name)?classType="gateway":libs._.contains(services,name)&&(classType="service"),classType}function _mapClassType(resource,attrs){attrs.classType=_getClassType(attrs.name)}function _mapStates(resource,attrs){var actionTypes=attrs.actionTypes,eventTypes=attrs.eventTypes,stateTypes=attrs.stateTypes,stateIds=libs._.pluck(stateTypes,"id");angular.forEach(actionTypes,function(actionType){libs._.contains(stateIds,actionType.id)?actionType.hasState=!0:actionType.hasState=!1}),angular.forEach(eventTypes,function(eventType){libs._.contains(stateIds,eventType.id)?eventType.hasState=!0:eventType.hasState=!1})}function discover(discoveryParams){var self=this;return websocketService.send({method:"Devices.GetDiscoveredDevices",params:{deviceClassId:self.id,discoveryParams:angular.toJson(discoveryParams)}})}function getCreateMethod(){var self=this,addBasePath="app/components/devices/add/pairing-templates/",editBasePath="app/components/devices/edit/pairing-templates/",createMethodData=null;return self.createMethods.indexOf("CreateMethodDiscovery")>-1?createMethodData={title:"Discovery",addTemplate:addBasePath+"devices-add-create-discovery.html",editTemplate:editBasePath+"devices-edit-create-discovery.html"}:self.createMethods.indexOf("CreateMethodUser")>-1?createMethodData={title:"User",addTemplate:addBasePath+"devices-add-create-user.html",editTemplate:editBasePath+"devices-edit-create-user.html"}:self.createMethods.indexOf("CreateMethodAuto")>-1?createMethodData={title:"Auto",addTemplate:null,ediTemplate:null}:$log.error("CreateMethod not implemented."),createMethodData}function getSetupMethod(){var self=this,addBasePath="app/components/devices/add/pairing-templates/",editBasePath="app/components/devices/edit/pairing-templates/",setupMethodData={};switch(self.setupMethod){case"SetupMethodJustAdd":setupMethodData=null;break;case"SetupMethodDisplayPin":setupMethodData={title:"Display Pin",addTemplate:addBasePath+"devices-add-setup-display-pin.html",editTemplate:editBasePath+"devices-edit-setup-display-pin.html"};break;case"SetupMethodEnterPin":setupMethodData={title:"Enter Pin",addTemplate:addBasePath+"devices-add-setup-enter-pin.html",editTemplate:editBasePath+"devices-edit-setup-enter-pin.html"};break;case"SetupMethodPushButton":setupMethodData={title:"Push Button",addTemplate:addBasePath+"devices-add-setup-push-button.html",editTemplate:editBasePath+"devices-edit-setup-push-button.html"};break;default:$log.error("SetupMethod not implemented.")}return setupMethodData}var deviceClassActionTypesId=0,deviceClassEventTypesId=0,deviceClassStateTypesId=0,DSDeviceClass=DS.defineResource({endpoint:"deviceclasses",idAttribute:"id",name:"deviceClass",relations:{belongsTo:{vendor:{localField:"vendor",localKey:"vendorId"}},hasMany:{deviceClassActionType:{localField:"deviceClassActionTypes",foreignKey:"deviceClassId"},deviceClassEventType:{localField:"deviceClassEventTypes",foreignKey:"deviceClassId"},deviceClassStateType:{localField:"deviceClassStateTypes",foreignKey:"deviceClassId"}}},computed:{templateUrl:["name",_addUiTemplate]},methods:{discover:discover,getCreateMethod:getCreateMethod,getSetupMethod:getSetupMethod},afterInject:function(resource,attrs){if(angular.isArray(attrs)){var arrayOfAttrs=attrs;angular.forEach(arrayOfAttrs,function(attrs){_addUiData(resource,attrs),_mapClassType(resource,attrs),_mapStates(resource,attrs),_createDeviceClassActionsTypes(resource,attrs)})}else _addUiData(resource,attrs),_mapClassType(resource,attrs),_mapStates(resource,attrs),_createDeviceClassActionsTypes(resource,attrs)}});return DSDeviceClass.getAllActionTypes=function(deviceClassId){var deviceClassActionTypes=DSDeviceClassActionType.getAll(),deviceClassActionTypesFiltered=deviceClassActionTypes.filter(function(deviceClassActionType){return deviceClassActionType.deviceClassId===deviceClassId}),actionTypes=(DS.get("deviceClass",deviceClassId),[]);return angular.forEach(deviceClassActionTypesFiltered,function(deviceClassActionType){if(deviceClassActionType.deviceClassId===deviceClassId){var actionType=DS.get("actionType",deviceClassActionType.actionTypeId);actionTypes.push(actionType)}}),actionTypes},DSDeviceClass.getAllEventTypes=function(deviceClassId){var deviceClassEventTypes=DSDeviceClassEventType.getAll(),deviceClassEventTypesFiltered=deviceClassEventTypes.filter(function(deviceClassEventType){return deviceClassEventType.deviceClassId===deviceClassId}),eventTypes=(DS.get("deviceClass",deviceClassId),[]);return angular.forEach(deviceClassEventTypesFiltered,function(deviceClassEventType){if(deviceClassEventType.deviceClassId===deviceClassId){var eventType=DS.get("eventType",deviceClassEventType.eventTypeId);eventTypes.push(eventType)}}),eventTypes},DSDeviceClass.getAllStateTypes=function(deviceClassId){var deviceClassStateTypes=DSDeviceClassStateType.getAll(),deviceClassStateTypesFiltered=deviceClassStateTypes.filter(function(deviceClassStateType){return deviceClassStateType.deviceClassId===deviceClassId}),stateTypes=(DS.get("deviceClass",deviceClassId),[]);return angular.forEach(deviceClassStateTypesFiltered,function(deviceClassStateType){if(deviceClassStateType.deviceClassId===deviceClassId){var stateType=DS.get("stateType",deviceClassStateType.stateTypeId);stateTypes.push(stateType)}}),stateTypes},angular.extend(DSDeviceClass,{load:load}),DSDeviceClass}angular.module("guh.models").factory("DSDeviceClass",DSDeviceClassFactory).run(function(DSDeviceClass){}),DSDeviceClassFactory.$inject=["$log","$q","DS","app","libs","websocketService","modelsHelper","DSDeviceClassActionType","DSDeviceClassEventType","DSDeviceClassStateType"]}(),function(){"use strict";function DSDeviceClassEventTypeFactory($log,DS,modelsHelper){var DSDeviceClassEventType=DS.defineResource({name:"deviceClassEventType",relations:{belongsTo:{deviceClass:{localField:"deviceClass",localKey:"deviceClassId"},eventType:{localField:"eventType",localKey:"eventTypeId"}}}});return DSDeviceClassEventType}angular.module("guh.models").factory("DSDeviceClassEventType",DSDeviceClassEventTypeFactory).run(function(DSDeviceClassEventType){}),DSDeviceClassEventTypeFactory.$inject=["$log","DS","modelsHelper"]}(),function(){"use strict";function DSDeviceClassActionTypeFactory($log,DS,modelsHelper){var DSDeviceClassActionType=DS.defineResource({name:"deviceClassActionType",relations:{belongsTo:{deviceClass:{localField:"deviceClass",localKey:"deviceClassId"},actionType:{localField:"actionType",localKey:"actionTypeId"}}}});return DSDeviceClassActionType}angular.module("guh.models").factory("DSDeviceClassActionType",DSDeviceClassActionTypeFactory).run(function(DSDeviceClassActionType){}),DSDeviceClassActionTypeFactory.$inject=["$log","DS","modelsHelper"]}(),function(){"use strict";function DSActionTypeFactory($log,DS,modelsHelper){function _addUiData(resource,attrs){var paramTypes=attrs.paramTypes;attrs.phrase='Execute "'+attrs.name+'"',angular.isArray(paramTypes)&&paramTypes.length>0&&(attrs.phrase=attrs.phrase+" with parameters");var isChildOfActionType=!0;angular.forEach(paramTypes,function(paramType){paramType=modelsHelper.addUiData(paramType,isChildOfActionType)}),attrs=modelsHelper.addUiData(attrs)}function getParams(){var self=this,params=[],paramTypes=self.paramTypes;return angular.forEach(paramTypes,function(paramType){params.push({name:paramType.name,value:paramType.value})}),params}function getRuleActionParams(params,actionParamType,eventParamType){var ruleActionParams=[];return angular.forEach(params,function(param){void 0!==actionParamType&&void 0!==eventParamType&&param.name===actionParamType.name?ruleActionParams.push({name:param.name,eventParamName:eventParamType.name,eventTypeId:eventParamType.eventDescriptor.eventTypeId}):ruleActionParams.push({name:param.name,value:param.value})}),ruleActionParams}var DSActionType=DS.defineResource({endpoint:"actiontypes",idAttribute:"id",name:"actionType",relations:{hasMany:{deviceClassActionType:{localField:"deviceClassActionTypes",foreignKey:"actionTypeId"}}},computed:{},methods:{getParams:getParams,getRuleActionParams:getRuleActionParams},afterInject:function(resource,attrs){if(angular.isArray(attrs)){var arrayOfAttrs=attrs;angular.forEach(arrayOfAttrs,function(attrs){_addUiData(resource,attrs)})}else _addUiData(resource,attrs)}});return DSActionType}angular.module("guh.models").factory("DSActionType",DSActionTypeFactory).run(function(DSActionType){}),DSActionTypeFactory.$inject=["$log","DS","modelsHelper"]}(),function(){"use strict";function config($provide){$provide.decorator("$log",["$injector","$delegate","guhLogging",function($injector,$delegate,guhLogging){function _applyCallbacks(logType,args){var logTypeData=guhLogging.getLogType(logType);angular.forEach(logTypeData.preCallbacks,function(preCallbackProvider){var preCallback=$injector.get(preCallbackProvider);preCallback.call(preCallback,{type:logType,args:args})}),guhLogging.isEnhanced(logType)?($delegate[logType].apply($delegate,args),guhLogging[logType].apply(null,args)):$delegate[logType].apply($delegate,args),angular.forEach(logTypeData.postCallbacks,function(postCallbackProvider){var postCallback=$injector.get(postCallbackProvider);postCallback.call(postCallback,{type:logType,args:args})})}function log(){var args=arguments;_applyCallbacks("log",args)}function info(){var args=arguments;_applyCallbacks("info",args)}function warn(){var args=arguments;_applyCallbacks("warn",args)}function error(){var args=arguments;_applyCallbacks("error",args)}var decorator={log:log,info:info,warn:warn,error:error};return decorator}])}angular.module("guh.logging",["guh.logging.hooks"]).config(config),config.$inject=["$provide"]}(),function(){"use strict";function Logging($injector){function _addHooks(prePost,logTypes,hooks){try{if(angular.isUndefined(logTypes)||null===logTypes||!angular.isString(logTypes))throw'Wrong argument type. The argument "logTypes" should be a comma seperated String.';if(angular.isDefined(hooks)&&null!==hooks&&!angular.isString(hooks))throw'Wrong argument type. The argument "hooks" should be a comma seperated String.'}catch(error){return error}var logTypesArray=logTypes.replace(/\s+/g,"").split(","),hooksArray=hooks.replace(/\s+/g,"").split(","),logTypeCallbacks=[];
angular.forEach(hooksArray,function(hook){angular.isDefined(_hooks[hook])&&null!==_hooks[hook]&&logTypeCallbacks.push(_hooks[hook])}),angular.forEach(_logTypes,function(_logType){_logType[prePost+"Callbacks"]=[]}),angular.forEach(logTypesArray,function(logType){angular.isDefined(_logTypes[logType])&&(_logTypes[logType][prePost+"Callbacks"]=logTypeCallbacks)})}function $get(){function isEnhanced(logType){return angular.isDefined(_logTypes[logType])&&angular.isDefined(_logTypes[logType].enhanced)?_logTypes[logType].enhanced:!1}function log(){}function info(){}function warn(){}function error(){}function getLogType(logType){return _logTypes[logType]}var service={isEnhanced:isEnhanced,log:log,info:info,warn:warn,error:error,getLogType:getLogType};return service}function enhance(logTypes){try{if(angular.isDefined(logTypes)&&null!==logTypes&&!angular.isString(logTypes))throw'Wrong argument type. The argument "logTypes" should be a comma seperated String.'}catch(error){return error}var logTypesArray=[];angular.isString(logTypes)?(logTypesArray=logTypes.replace(/\s+/g,"").split(","),angular.forEach(_logTypes,function(_logType){_logType.enhanced=!1}),angular.forEach(logTypesArray,function(logType){angular.isDefined(_logTypes[logType])&&(_logTypes[logType].enhanced=!0)})):angular.forEach(_logTypes,function(_logType){_logType.enhanced=!0})}function before(logTypes,hooks){_addHooks("pre",logTypes,hooks)}function after(logTypes,hooks){_addHooks("post",logTypes,hooks)}function decorate(message){}var _logTypes={log:{},info:{},warn:{},error:{}},_hooks={http:"guhLoggingHttpHook",broadcast:"guhLoggingBroadcastHook",websocket:null},provider={$get:$get,enhance:enhance,before:before,after:after,decorate:decorate};return provider}angular.module("guh.logging").provider("guhLogging",Logging),Logging.$inject=["$injector"]}(),function(){"use strict";function config(){}angular.module("guh.api",[]).config(config),config.$inject=[]}(),function(){"use strict";function websocketService($log,$rootScope,$q,libs,app,DS){function _getRequestId(){return currentRequestId+=1,currentRequestId>1e4&&(currentRequestId=0),currentRequestId}function close(){ws&&(ws=null)}function connect(){ws||(ws=new WebSocket(app.websocketUrl),ws.onopen=function(event){$log.log("Successfully connected with websocket.",ws,event),$rootScope.$apply(function(){$rootScope.$broadcast("WebsocketConnected","Successful connected to guh.")})},ws.onclose=function(event){$log.log("Closed websocket connection.",ws,event),$rootScope.$apply(function(){$rootScope.$broadcast("WebsocketConnectionLost","The app has lost the connection to guh. Please check if you are connected to your network and if guh is running correctly.")})},ws.onerror=function(event){$log.error("There was an error with the websocket connection.",ws,event),$rootScope.$apply(function(){$rootScope.$broadcast("WebsocketConnectionError","There was an error connecting to guh.")})},ws.onmessage=function(message){var data=angular.fromJson(message.data);if(angular.isDefined(data.notification))switch(data.notification){case app.notificationTypes.devices.stateChanged:var deviceId=data.params.deviceId,stateTypeId=data.params.stateTypeId,value=data.params.value;$log.log("state changed",data),DS.inject("state",{id:""+deviceId+"_"+stateTypeId,deviceId:deviceId,stateTypeId:stateTypeId,value:value});break;case app.notificationTypes.devices.deviceAdded:var deviceId=data.params.device.id,device=DS.get("device",deviceId);if(angular.isUndefined(device)){var injectedItem=DS.inject("device",data.params.device);DS.is("device",injectedItem)&&$rootScope.$broadcast("ReloadView",injectedItem.deviceClass.name+" was added.")}break;case app.notificationTypes.devices.deviceRemoved:var deviceId=data.params.deviceId,ejectedItem=DS.eject("device",deviceId);angular.isDefined(ejectedItem)&&$rootScope.$broadcast("ReloadView","Device was removed.");break;case app.notificationTypes.rules.ruleConfigurationChanged:var rule=data.params.rule,injectedItem=DS.inject("rule",rule);DS.is("rule",injectedItem)&&$rootScope.$broadcast("ReloadView",injectedItem.name+" was updated.");break;case app.notificationTypes.rules.ruleAdded:var ruleId=data.params.rule.id,rule=DS.get("rule",ruleId);if(angular.isUndefined(rule)){var injectedItem=DS.inject("rule",data.params.rule);DS.is("rule",injectedItem)&&$rootScope.$broadcast("ReloadView",injectedItem.name+" was added.")}break;case app.notificationTypes.rules.ruleRemoved:var ruleId=data.params.ruleId,ejectedItem=DS.eject("rule",ruleId);angular.isDefined(ejectedItem)&&$rootScope.$broadcast("ReloadView","Rule was removed.")}else angular.isDefined(data.authenticationRequired)?$rootScope.$apply(function(){$rootScope.$broadcast("InitialHandshake",data)}):callbacks.hasOwnProperty(data.id)&&("success"===data.status?angular.isDefined(data.params.deviceError)&&"DeviceErrorNoError"!==data.params.deviceError?$rootScope.$apply(callbacks[data.id].callback.reject(data.params.deviceError)):angular.isDefined(data.params.loggingError)&&"LoggingErrorNoError"!==data.params.loggingError?$rootScope.$apply(callbacks[data.id].callback.reject(data.params.loggingError)):angular.isDefined(data.params.ruleError)&&"RuleErrorNoError"!==data.params.ruleError?$rootScope.$apply(callbacks[data.id].callback.reject(data.params.ruleError)):$rootScope.$apply(callbacks[data.id].callback.resolve(data.params)):$rootScope.$apply(callbacks[data.id].callback.reject(data.error)),delete callbacks[data.id])})}function reconnect(){websocketService.close(),websocketService.connect()}function send(request){var defer=$q.defer(),requestId=_getRequestId();return callbacks[requestId]={time:new Date,callback:defer},request.id=requestId,ws.send(angular.toJson(request)),defer.promise}var ws=null,callbacks={},currentRequestId=0,websocketService={close:close,connect:connect,reconnect:reconnect,send:send};return websocketService}angular.module("guh.api").factory("websocketService",websocketService),websocketService.$inject=["$log","$rootScope","$q","libs","app","DS"]}();
//# sourceMappingURL=guh-libjs.min.js.map