{"version":3,"sources":["logging/hooks/logging-hooks-module.js","logging/hooks/logging-http-hook-provider.js","logging/hooks/logging-broadcast-hook-provider.js","models/models-module.js","models/vendor-model-service.js","models/state-type-model-service.js","models/state-model-service.js","models/rule-model-service.js","models/param-type-model-service.js","models/models-helper.js","models/logs-model-service.js","models/event-type-model-service.js","models/device-model-service.js","models/device-class-state-type-model-service.js","models/device-class-model-service.js","models/device-class-event-type-service.js","models/device-class-action-type-model-service.js","models/action-type-model-service.js","logging/logging-module.js","logging/logging-provider.js","api/api-module.js","api/websocket-api-service.js"],"names":["config","angular","module","$inject","guhLoggingHttpHook","_checkParameter","parameterName","parameter","isDefined","isString","error","_setServerAddress","locationServer","locationProtocol","locationHost","locationPort","$get","$http","logObject","post","data","then","response","console","log","payload","setProtocol","protocol","setHostname","hostname","setPort","port","getServer","location","provider","guhLoggingBroadcastHook","$rootScope","type","argsArray","args","slice","call","isArray","length","$broadcast","context","DSHttpAdapterProvider","DSProvider","app","defaults","deserialize","resourceConfig","basePath","apiUrl","debug","DSVendorFactory","$log","DS","DSVendor","defineResource","endpoint","idAttribute","name","relations","hasMany","deviceClass","localField","foreignKey","computed","methods","factory","run","DSStateTypeFactory","modelsHelper","_addUiData","resource","attrs","regExp","searchUnit","replace","phrase","test","addUiData","DSStateType","deviceClassStateType","afterInject","arrayOfAttrs","forEach","DSStateFactory","DSState","belongsTo","device","localKey","parent","hasOne","stateType","compoundId","deviceId","stateTypeId","value","DSRuleFactory","executeActions","self","this","adapters","http","POST","id","executeExitActions","remove","DSRule","destroy","DSParamTypeFactory","DSParamType","$q","File","_getInputPath","folderName","directiveName","filename","basePaths","ui","fileExtensions","html","_getActionTemplate","actionType","paramTypes","undefined","templateUrl","warn","guhType","_getInputTemplate","isChildOfActionType","template","allowedValues","inputType","inputTypes","is","actionTemplateUrl","inputTemplateUrl","checkTemplateUrl","pathElements","split","file","pop","path","join","fileExists","when","checkFile","setBasePath","DSLogsFactory","DSLogs","DSEventTypeFactory","paramType","getParamDescriptor","operator","paramDescriptor","DSEventType","DSDeviceFactory","$httpParamSerializer","libs","websocketService","_addCustomName","nameParameter","_","find","params","param","_createStates","states","state","index","stateInstance","createInstance","inject","isUndefined","get","_removeStates","ejectedItem","eject","getDescription","delimiter","vendorName","vendor","deviceClassName","subscribe","cb","unsubscribe","pair","deviceClassId","deviceDescriptorId","deviceParams","options","confirmPairing","pairingTransactionId","add","DSDevice","create","cacheResponse","edit","deviceData","deviceParamTypes","deviceParamType","deviceParam","push","update","executeAction","paramSerializer","getEventDescriptor","eventType","paramDescriptors","eventDescriptor","eventTypeId","getStateDescriptor","stateDescriptor","getAction","action","ruleActionParams","getRuleActionParams","actionTypeId","afterEject","extend","DSDeviceClassStateTypeFactory","DSDeviceClassStateType","DSDeviceClassFactory","DSHttpAdapter","DSDeviceClassActionType","DSDeviceClassEventType","classType","_getClassType","devices","services","_addUiTemplate","templateName","toLowerCase","_createDeviceClassActionsTypes","deviceClassActionTypes","getAll","deviceClassEventTypes","deviceClassStateTypes","actionTypes","eventTypes","stateTypes","actionTypeInstance","deviceClassActionTypesFiltered","filter","deviceClassActionType","deviceClassActionTypesId","deviceClassActionTypeInstance","eventTypeInstance","deviceClassEventTypesFiltered","deviceClassEventType","deviceClassEventTypesId","deviceClassEventTypeInstance","stateTypeInstance","deviceClassStateTypesFiltered","deviceClassStateTypesId","deviceClassStateTypeInstance","discoveryParamTypes","devServices","gateways","moods","contains","_mapClassType","_mapStates","stateIds","pluck","hasState","discover","discoveryParams","GET","toJson","getCreateMethod","addBasePath","editBasePath","createMethodData","createMethods","indexOf","title","addTemplate","editTemplate","ediTemplate","getSetupMethod","setupMethodData","setupMethod","DSDeviceClass","getAllActionTypes","getAllEventTypes","getAllStateTypes","DSDeviceClassEventTypeFactory","DSDeviceClassActionTypeFactory","DSActionTypeFactory","getParams","actionParamType","eventParamType","eventParamName","DSActionType","$provide","decorator","$injector","$delegate","guhLogging","_applyCallbacks","logType","logTypeData","getLogType","preCallbacks","preCallbackProvider","preCallback","isEnhanced","apply","postCallbacks","postCallbackProvider","postCallback","arguments","info","Logging","_addHooks","prePost","logTypes","hooks","logTypesArray","hooksArray","logTypeCallbacks","hook","_hooks","_logTypes","_logType","enhanced","service","enhance","before","after","decorate","message","broadcast","websocket","close","ws","connect","WebSocket","websocketUrl","onopen","event","$apply","onclose","onerror","onmessage","fromJson","notification","notificationTypes","stateChanged","deviceAdded","injectedItem","setupComplete","deviceRemoved","reconnect","callbacks"],"mappings":"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","file":"guh-libjs.min.js","sourcesContent":["/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n *                                                                                     *\n * Copyright (C) 2015 Lukas Mayerhofer <lukas.mayerhofer@guh.guru>                     *\n *                                                                                     *\n * Permission is hereby granted, free of charge, to any person obtaining a copy        *\n * of this software and associated documentation files (the \"Software\"), to deal       *\n * in the Software without restriction, including without limitation the rights        *\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell           *\n * copies of the Software, and to permit persons to whom the Software is               *\n * furnished to do so, subject to the following conditions:                            *\n *                                                                                     *\n * The above copyright notice and this permission notice shall be included in all      *\n * copies or substantial portions of the Software.                                     *\n *                                                                                     *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR          *\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,            *\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE         *\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER              *\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,       *\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE       *\n * SOFTWARE.                                                                           *\n *                                                                                     *\n * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */\n\n(function() {\n  'use strict';\n\n  angular\n    .module('guh.logging.hooks', [])\n    .config(config);\n\n  config.$inject = [];\n\n  function config() {}\n\n}());","/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n *                                                                                     *\n * Copyright (C) 2015 Lukas Mayerhofer <lukas.mayerhofer@guh.guru>                     *\n *                                                                                     *\n * Permission is hereby granted, free of charge, to any person obtaining a copy        *\n * of this software and associated documentation files (the \"Software\"), to deal       *\n * in the Software without restriction, including without limitation the rights        *\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell           *\n * copies of the Software, and to permit persons to whom the Software is               *\n * furnished to do so, subject to the following conditions:                            *\n *                                                                                     *\n * The above copyright notice and this permission notice shall be included in all      *\n * copies or substantial portions of the Software.                                     *\n *                                                                                     *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR          *\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,            *\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE         *\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER              *\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,       *\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE       *\n * SOFTWARE.                                                                           *\n *                                                                                     *\n * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */\n\n(function() {\n  'use strict';\n\n  angular\n    .module('guh.logging.hooks')\n    .provider('guhLoggingHttpHook', guhLoggingHttpHook);\n\n  function guhLoggingHttpHook() {\n    // Variables\n    var locationProtocol = location.protocol;\n    var locationHost = location.hostname;\n    var locationPort = location.port;\n    var locationServer = locationProtocol + '//' + locationHost + ':' + locationPort;\n\n\n    var provider = {\n      // Provider methods (needed)\n      $get: ['$http', $get],\n\n      // Other methods\n      getServer: getServer,\n      setProtocol: setProtocol,\n      setHostname: setHostname,\n      setPort: setPort\n    };\n\n    return provider;\n\n\n    function _checkParameter(parameterName, parameter) {\n      try {\n        if(!angular.isDefined(parameter) || parameter === null) {\n          throw 'The parameter ' + parameterName + ' has to be defined.';\n        } else if(!angular.isString(parameter)) {\n          throw 'The value of ' + parameterName + ' has to be a string.';\n        }\n      } catch(error) {\n        return;\n      }\n    }\n\n    function _setServerAddress() {\n      locationServer = locationProtocol + '//' + locationHost + ':' + locationPort;\n    }\n\n\n    function $get($http) {\n      return function(logObject) {\n        $http\n          .post(locationServer, {\n            data: logObject\n          })\n          .then(function(response) {\n            console.log('Data successfully sent.', {\n              payload: logObject,\n              response: response\n            });\n          })\n          .catch(function(error) {\n            console.log('Data not sent.', {\n              payload: logObject,\n              error: error\n            })\n          });\n      }\n\n      // console.log('$get', $http);\n\n      // var service = {\n      //   // Variables\n      //   protocol: locationProtocol,\n      //   host: locationHost,\n      //   port: locationPort,\n      //   server: locationServer,\n\n      //   // Methods\n      //   addToQueue: addToQueue\n      // };\n\n      // return service;\n\n\n      // function addToQueue($http) {\n      //   console.log('addToQueue', $http);\n      // }\n    }\n\n    function setProtocol(protocol) {\n      _checkParameter('protocol', protocol);\n      locationProtocol = protocol;\n      _setServerAddress();\n    }\n\n    function setHostname(hostname) {\n      _checkParameter('hostname', hostname);\n      locationHost = hostname;\n      _setServerAddress();\n    }\n\n    function setPort(port) {\n      _checkParameter('port', port);\n      locationPort = port;\n      _setServerAddress();\n    }\n\n    function getServer() {\n      return locationServer;\n    }\n  }\n\n}());\n","/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n *                                                                                     *\n * Copyright (C) 2015 Lukas Mayerhofer <lukas.mayerhofer@guh.guru>                     *\n *                                                                                     *\n * Permission is hereby granted, free of charge, to any person obtaining a copy        *\n * of this software and associated documentation files (the \"Software\"), to deal       *\n * in the Software without restriction, including without limitation the rights        *\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell           *\n * copies of the Software, and to permit persons to whom the Software is               *\n * furnished to do so, subject to the following conditions:                            *\n *                                                                                     *\n * The above copyright notice and this permission notice shall be included in all      *\n * copies or substantial portions of the Software.                                     *\n *                                                                                     *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR          *\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,            *\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE         *\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER              *\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,       *\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE       *\n * SOFTWARE.                                                                           *\n *                                                                                     *\n * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */\n\n(function() {\n  'use strict';\n\n  angular\n    .module('guh.logging.hooks')\n    .provider('guhLoggingBroadcastHook', guhLoggingBroadcastHook);\n\n  function guhLoggingBroadcastHook() {\n\n    var provider = {\n      // Provider methods (needed)\n      $get: ['$rootScope', $get]\n    };\n\n    return provider;\n\n\n    function $get($rootScope) {\n      return function(logObject) {\n        var type = logObject.type ? logObject.type : null;\n        var argsArray = logObject.args ? [].slice.call(logObject.args) : null;\n\n        if(angular.isArray(argsArray)) {\n          switch(argsArray.length) {\n            case 1:\n              if(!angular.isString(argsArray[0])) {\n                $rootScope.$broadcast('notification', {\n                  type: type,\n                  args: argsArray[0]\n                });\n              }\n              break;\n            case 2:\n              $rootScope.$broadcast('notification', {\n                type: type,\n                context: argsArray[0],\n                args: argsArray[1]\n              });\n              break;\n            default:\n              console.log('Wrong number of arguments.', logObject.type, logObject.args, argsArray.length);\n          }\n        }\n      }\n    }\n  }\n\n}());\n","/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n *                                                                                     *\n * Copyright (C) 2015 Lukas Mayerhofer <lukas.mayerhofer@guh.guru>                     *\n *                                                                                     *\n * Permission is hereby granted, free of charge, to any person obtaining a copy        *\n * of this software and associated documentation files (the \"Software\"), to deal       *\n * in the Software without restriction, including without limitation the rights        *\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell           *\n * copies of the Software, and to permit persons to whom the Software is               *\n * furnished to do so, subject to the following conditions:                            *\n *                                                                                     *\n * The above copyright notice and this permission notice shall be included in all      *\n * copies or substantial portions of the Software.                                     *\n *                                                                                     *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR          *\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,            *\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE         *\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER              *\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,       *\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE       *\n * SOFTWARE.                                                                           *\n *                                                                                     *\n * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */\n\n(function() {\n  'use strict';\n\n  angular\n    .module('guh.models', [\n      // Datastore\n      'js-data'\n    ])\n    .config(config);\n\n  config.$inject = ['DSHttpAdapterProvider', 'DSProvider', 'app'];\n\n  function config(DSHttpAdapterProvider, DSProvider, app) {\n    DSHttpAdapterProvider\n      .defaults\n      .log = false;\n\n    DSHttpAdapterProvider\n      .defaults\n      .deserialize = function deserialize(resourceConfig, data) {\n        return data ? ('data' in data ? data.data : data) : data;\n      };\n\n\n    DSProvider\n      .defaults\n      .basePath = app.apiUrl;\n\n    DSProvider\n      .defaults\n      .debug = false;\n  }\n\n}());","/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n *                                                                                     *\n * Copyright (C) 2015 Lukas Mayerhofer <lukas.mayerhofer@guh.guru>                     *\n *                                                                                     *\n * Permission is hereby granted, free of charge, to any person obtaining a copy        *\n * of this software and associated documentation files (the \"Software\"), to deal       *\n * in the Software without restriction, including without limitation the rights        *\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell           *\n * copies of the Software, and to permit persons to whom the Software is               *\n * furnished to do so, subject to the following conditions:                            *\n *                                                                                     *\n * The above copyright notice and this permission notice shall be included in all      *\n * copies or substantial portions of the Software.                                     *\n *                                                                                     *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR          *\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,            *\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE         *\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER              *\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,       *\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE       *\n * SOFTWARE.                                                                           *\n *                                                                                     *\n * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */\n\n(function() {\n  'use strict';\n\n  angular\n    .module('guh.models')\n    .factory('DSVendor', DSVendorFactory)\n    .run(function(DSVendor) {});\n\n  DSVendorFactory.$inject = ['$log', 'DS'];\n\n  function DSVendorFactory($log, DS) {\n    \n    var staticMethods = {};\n\n    /*\n     * DataStore configuration\n     */\n    var DSVendor = DS.defineResource({\n\n      // API configuration\n      endpoint: 'vendors',\n\n      // Model configuration\n      idAttribute: 'id',\n      name: 'vendor',\n      relations: {\n        hasMany: {\n          deviceClass: {\n            localField: 'deviceClasses',\n            foreignKey: 'vendorId'\n          }\n        }\n      },\n\n      // Computed properties\n      computed: {},\n\n      // Instance methods\n      methods: {}\n\n    });\n\n    return DSVendor;\n\n  }\n\n}());","/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n *                                                                                     *\n * Copyright (C) 2015 Lukas Mayerhofer <lukas.mayerhofer@guh.guru>                     *\n *                                                                                     *\n * Permission is hereby granted, free of charge, to any person obtaining a copy        *\n * of this software and associated documentation files (the \"Software\"), to deal       *\n * in the Software without restriction, including without limitation the rights        *\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell           *\n * copies of the Software, and to permit persons to whom the Software is               *\n * furnished to do so, subject to the following conditions:                            *\n *                                                                                     *\n * The above copyright notice and this permission notice shall be included in all      *\n * copies or substantial portions of the Software.                                     *\n *                                                                                     *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR          *\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,            *\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE         *\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER              *\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,       *\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE       *\n * SOFTWARE.                                                                           *\n *                                                                                     *\n * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */\n\n(function() {\n  'use strict';\n\n  angular\n    .module('guh.models')\n    .factory('DSStateType', DSStateTypeFactory)\n    .run(function(DSStateType) {});\n\n  DSStateTypeFactory.$inject = ['$log', 'DS', 'modelsHelper'];\n\n  function DSStateTypeFactory($log, DS, modelsHelper) {\n    \n    var staticMethods = {};\n\n    /*\n     * DataStore configuration\n     */\n    var DSStateType = DS.defineResource({\n\n      // API configuration\n      endpoint: 'statetypes',\n\n      // Model configuration\n      idAttribute: 'id',\n      name: 'stateType',\n      relations: {\n        // belongsTo: {\n        //   deviceClass: {\n        //     localField: 'deviceClass',\n        //     localKey: 'deviceClassId',\n        //     parent: true\n        //   }\n        // }\n        hasMany: {\n          deviceClassStateType: {\n            localField: 'deviceClassStateTypes',\n            foreignKey: 'stateTypeId'\n          },\n        }\n      },\n\n      // Computed properties\n      computed: {},\n\n      // Instance methods\n      methods: {},\n\n      // Lifecycle hooks\n      afterInject: function(resource, attrs) {\n        if(angular.isArray(attrs)) {\n          var arrayOfAttrs = attrs;\n          angular.forEach(arrayOfAttrs, function(attrs) {\n            _addUiData(resource, attrs);\n          });\n        } else {\n          _addUiData(resource, attrs);\n        }\n      }\n\n    });\n\n    return DSStateType;\n\n\n    /*\n     * Private method: _addUiData(resource, attrs)\n     */\n    function _addUiData(resource, attrs) {\n      // var paramTypes = attrs.paramTypes;\n      var regExp = /\\s\\[([^)]+)\\]/;                 // Value inside brackets []\n      var searchUnit = name.replace(regExp, '');    // Get value inside brackets\n      var phrase = attrs.name;\n\n      // If name contains the unit in brackets []\n      if(regExp.test(name)) {\n        phrase = searchUnit;\n      }\n\n      // phrase\n      attrs.phrase = 'When value of ' + phrase;\n\n      // Add templateUrl to stateType\n      attrs = modelsHelper.addUiData(attrs);\n    }\n\n  }\n\n}());","/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n *                                                                                     *\n * Copyright (C) 2015 Lukas Mayerhofer <lukas.mayerhofer@guh.guru>                     *\n *                                                                                     *\n * Permission is hereby granted, free of charge, to any person obtaining a copy        *\n * of this software and associated documentation files (the \"Software\"), to deal       *\n * in the Software without restriction, including without limitation the rights        *\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell           *\n * copies of the Software, and to permit persons to whom the Software is               *\n * furnished to do so, subject to the following conditions:                            *\n *                                                                                     *\n * The above copyright notice and this permission notice shall be included in all      *\n * copies or substantial portions of the Software.                                     *\n *                                                                                     *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR          *\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,            *\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE         *\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER              *\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,       *\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE       *\n * SOFTWARE.                                                                           *\n *                                                                                     *\n * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */\n\n(function() {\n  'use strict';\n\n  angular\n    .module('guh.models')\n    .factory('DSState', DSStateFactory)\n    .run(function(DSState) {});\n\n  DSStateFactory.$inject = ['$log', 'DS'];\n\n  function DSStateFactory($log, DS) {\n    \n    var staticMethods = {};\n\n    /*\n     * DataStore configuration\n     */\n    var DSState = DS.defineResource({\n\n      // API configuration\n      endpoint: 'states',\n\n      // Model configuration\n      // idAttribute: 'stateTypeId',\n      idAttribute: 'compoundId',\n      name: 'state',\n      relations: {\n        belongsTo: {\n          device: {\n            localField: 'device',\n            localKey: 'deviceId',\n            parent: true\n          }\n        },\n        hasOne: {\n          stateType: {\n            localField: 'stateType',\n            localKey: 'stateTypeId'\n          }\n        }\n      },\n\n      // Computed properties\n      computed: {\n        compoundId: ['deviceId', 'stateTypeId', 'value', function (deviceId, stateTypeId, value) {\n          return '' + deviceId + '_' + stateTypeId;\n        }]\n      },\n\n      // Instance methods\n      methods: {}\n\n    });\n\n    return DSState;\n\n  }\n\n}());","/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n *                                                                                     *\n * Copyright (C) 2015 Lukas Mayerhofer <lukas.mayerhofer@guh.guru>                     *\n *                                                                                     *\n * Permission is hereby granted, free of charge, to any person obtaining a copy        *\n * of this software and associated documentation files (the \"Software\"), to deal       *\n * in the Software without restriction, including without limitation the rights        *\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell           *\n * copies of the Software, and to permit persons to whom the Software is               *\n * furnished to do so, subject to the following conditions:                            *\n *                                                                                     *\n * The above copyright notice and this permission notice shall be included in all      *\n * copies or substantial portions of the Software.                                     *\n *                                                                                     *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR          *\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,            *\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE         *\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER              *\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,       *\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE       *\n * SOFTWARE.                                                                           *\n *                                                                                     *\n * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */\n\n(function() {\n  'use strict';\n\n  angular\n    .module('guh.models')\n    .factory('DSRule', DSRuleFactory)\n    .run(function(DSRule) {});\n\n  DSRuleFactory.$inject = ['$log', 'app', 'DS'];\n\n  function DSRuleFactory($log, app, DS) {\n    \n    var staticMethods = {};\n\n    /*\n     * DataStore configuration\n     */\n    var DSRule = DS.defineResource({\n\n      // API configuration\n      endpoint: 'rules',\n\n      // Model configuration\n      idAttribute: 'id',\n      name: 'rule',\n      relations: {},\n\n      // Computed properties\n      computed: {},\n\n      // Instance methods\n      methods: {\n        // API\n        executeActions: executeActions,\n        executeExitActions: executeExitActions,\n        remove: remove\n      }\n\n    });\n\n    return DSRule;\n\n\n    /*\n     * Public method: executeActions()\n     */\n    function executeActions() {\n      /* jshint validthis: true */\n      var self = this;\n\n      return DS\n        .adapters\n        .http\n        .POST(app.apiUrl + '/rules/' + self.id + \"/executeactions\");   \n    }\n\n    /*\n     * Public method: executeExitActions()\n     */\n    function executeExitActions() {\n      /* jshint validthis: true */\n      var self = this;\n\n      return DS\n        .adapters\n        .http\n        .POST(app.apiUrl + '/rules/' + self.id + \"/executeexitactions\");   \n    }\n\n    /*\n     * Public method: remove()\n     */\n    function remove() {\n      /* jshint validthis: true */\n      var self = this;\n\n      return DSRule.destroy(self.id);\n    }\n\n\n  }\n\n}());","/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n *                                                                                     *\n * Copyright (C) 2015 Lukas Mayerhofer <lukas.mayerhofer@guh.guru>                     *\n *                                                                                     *\n * Permission is hereby granted, free of charge, to any person obtaining a copy        *\n * of this software and associated documentation files (the \"Software\"), to deal       *\n * in the Software without restriction, including without limitation the rights        *\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell           *\n * copies of the Software, and to permit persons to whom the Software is               *\n * furnished to do so, subject to the following conditions:                            *\n *                                                                                     *\n * The above copyright notice and this permission notice shall be included in all      *\n * copies or substantial portions of the Software.                                     *\n *                                                                                     *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR          *\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,            *\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE         *\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER              *\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,       *\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE       *\n * SOFTWARE.                                                                           *\n *                                                                                     *\n * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */\n\n(function() {\n  'use strict';\n\n  angular\n    .module('guh.models')\n    .factory('DSParamType', DSParamTypeFactory)\n    .run(function(DSParamType) {});\n\n  DSParamTypeFactory.$inject = ['$log', 'DS'];\n\n  function DSParamTypeFactory($log, DS) {\n    \n    var staticMethods = {};\n\n    /*\n     * DataStore configuration\n     */\n    var DSParamType = DS.defineResource({\n\n      // Model configuration\n      name: 'paramType',\n      relations: {\n        belongsTo: {\n          deviceClass: {\n            localField: 'deviceClass',\n            localKey: 'deviceClassId'\n          }\n        }\n      },\n\n      // Computed properties\n      computed: {},\n\n      // Instance methods\n      methods: {}\n\n    });\n\n    return DSParamType;\n\n  }\n\n}());","/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n *                                                                                     *\n * Copyright (C) 2015 Lukas Mayerhofer <lukas.mayerhofer@guh.guru>                     *\n *                                                                                     *\n * Permission is hereby granted, free of charge, to any person obtaining a copy        *\n * of this software and associated documentation files (the \"Software\"), to deal       *\n * in the Software without restriction, including without limitation the rights        *\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell           *\n * copies of the Software, and to permit persons to whom the Software is               *\n * furnished to do so, subject to the following conditions:                            *\n *                                                                                     *\n * The above copyright notice and this permission notice shall be included in all      *\n * copies or substantial portions of the Software.                                     *\n *                                                                                     *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR          *\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,            *\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE         *\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER              *\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,       *\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE       *\n * SOFTWARE.                                                                           *\n *                                                                                     *\n * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */\n\n(function() {\n  'use strict';\n\n  angular\n    .module('guh.models')\n    .factory('modelsHelper', modelsHelper);\n\n  modelsHelper.$inject = ['$log', '$q', 'DS', 'File', 'app'];\n\n  function modelsHelper($log, $q, DS, File, app) {\n\n    var modelsHelper = {\n      addUiData: addUiData,\n      checkTemplateUrl: checkTemplateUrl,\n      setBasePath: setBasePath\n    };\n\n    return modelsHelper;\n\n\n    /*\n     * Private method: _getInputPath(directiveName, filename)\n     */\n    function _getInputPath(folderName, directiveName, filename) {\n      if(directiveName) {\n        return app.basePaths.ui + folderName + '/' + directiveName + '-templates/' + filename + app.fileExtensions.html;\n      } else {\n        return app.basePaths.ui + folderName + '/templates/' + filename + app.fileExtensions.html;\n      }\n    }\n\n    /*\n     * Private method: _getActionTemplates(actionType)\n     */\n    function _getActionTemplate(actionType) {\n      var paramTypes = (actionType.paramTypes === undefined) ? null : actionType.paramTypes;\n      var folderName = 'form';\n      var directiveName = 'form-field';\n\n      if(angular.isArray(paramTypes)) {\n        if(paramTypes.length === 0) {\n          actionType.templateUrl = _getInputPath(folderName, directiveName, directiveName + '-button');\n        } else {\n          actionType.templateUrl = undefined;\n        }\n        // if(paramTypes.length <= 0) {\n        //   // ActionType\n        //   actionType.templateUrl = _getInputPath(folderName, directiveName, directiveName + '-default');\n        // } else if(paramTypes.length === 1) {\n        //   // ActionType\n        //   actionType.templateUrl = _getInputPath(folderName, directiveName, directiveName + '-default');\n\n        //   // ParamType\n        //   // paramTypes[0].templateUrl = _getInputTemplate(paramTypes[0], true);\n        // } else if(paramTypes.length > 1) {\n        //   // ActionType\n        //   actionType.templateUrl = _getInputPath(folderName, directiveName, directiveName + '-execute');\n\n        //   // ParamTypes\n        //   // angular.forEach(paramTypes, function(paramType, index) {\n        //   //   actionType.paramTypes[index].templateUrl = _getInputTemplate(paramType, true);\n        //   // });\n        // }\n      } else {\n        $log.warn('guh.models.modelsHelper | The property paramTypes is not of type Array.', guhType);\n      }\n    }\n\n    /*\n     * Private method: _getInputTemplate(guhType, isChildOfActionType)\n     * guhType can be of type: ParamType, StateType\n     */\n    function _getInputTemplate(guhType, isChildOfActionType) {\n      var allowedValues = (guhType.allowedValues === undefined) ? null : guhType.allowedValues;\n      var inputType = (guhType.inputType === undefined) ? null : guhType.inputType;\n      var type = (guhType.type === undefined) ? null : guhType.type;\n      var folderName = 'form';\n      var directiveName = 'form-field';\n      var template;\n\n      switch(type) {\n        case 'Bool':\n          if(isChildOfActionType) {\n            template = _getInputPath(folderName, directiveName, directiveName + '-toggle-button');\n          } else {\n            template = _getInputPath(folderName, directiveName, directiveName + '-checkbox');\n          }\n          break;\n        case 'Int':\n        case 'Uint':\n          if(isChildOfActionType) {\n            template = _getInputPath(folderName, directiveName, directiveName + '-range');\n          } else {\n            template = _getInputPath(folderName, directiveName, directiveName + '-number-integer');\n          }\n          break;\n        case 'Double':\n          if(isChildOfActionType) {\n            template = _getInputPath(folderName, directiveName, directiveName + '-range');\n          } else {\n            template = _getInputPath(folderName, directiveName, directiveName + '-number-decimal');\n          }\n          break;\n        case 'Color':\n          template = _getInputPath(folderName, directiveName, directiveName + '-color');\n          break;\n        case 'String':\n          if(allowedValues) {\n            if(isChildOfActionType) {\n              template = _getInputPath(folderName, directiveName, directiveName + '-select');\n            } else {\n              template = _getInputPath(folderName, directiveName, directiveName + '-select');\n            }\n          } else if(inputType) {\n            template = _getInputPath(folderName, directiveName, directiveName + app.inputTypes[inputType]);\n          } else {\n            template = _getInputPath(folderName, directiveName, directiveName + '-text');\n          }\n          break;\n        default:\n          template = _getInputPath(folderName, directiveName, 'template-not-available');\n          // template = null;\n      }\n\n      return template;\n    }\n\n    /*\n     * Private method: _getValue(guhType)\n     */\n    function _getValue(guhType) {\n      var type = (guhType.type === undefined) ? null : guhType.type;\n      var value;\n\n      switch(type) {\n        case 'Bool':\n          value = guhType.defaultValue || false;\n          break;\n        case 'Int':\n        case 'Uint':\n          value = guhType.defaultValue || 0;\n          break;\n        case 'Double':\n          value = guhType.defaultValue || 0.0;\n          break;\n        case 'Color':\n          value = guhType.defaultValue || '0,0,0';\n          break;\n        case 'String':\n          value = guhType.defaultValue || '';\n          break;\n        default:\n          value = guhType.defaultValue || undefined;\n          break;\n      }\n\n      return value;\n    }\n\n\n    /*\n     * Public method: addUiData(guhType)\n     * guhType can be of type: ActionType, StateType, ParamType\n     */\n    function addUiData(guhType, isChildOfActionType) {\n      var type;\n\n      if(DS.is('actionType', guhType)) {\n        guhType.actionTemplateUrl = _getActionTemplate(guhType);\n        type = 'actionType';\n        // _setActionTemplates(guhType);\n      } else if(DS.is('stateType', guhType)) {\n        isChildOfActionType = false;\n        guhType.inputTemplateUrl = _getInputTemplate(guhType, isChildOfActionType);\n        // guhType.operator = app.valueOperator.is.operators[0];\n        // guhType.value = _getValue(guhType);\n        type = 'stateType';\n        // guhType.templateUrl = _getInputTemplate(guhType);\n      } else {\n        guhType.inputTemplateUrl = _getInputTemplate(guhType, isChildOfActionType);\n        // guhType.value = _getValue(guhType);\n        type = 'paramType';\n        // guhType.templateUrl = _getInputTemplate(guhType);\n      }\n\n      // $log.log('Template of ' + type + ' [' + guhType.name + ' / ' + guhType.type + ']: ', guhType.templateUrl);\n\n      return guhType;\n    }\n\n    /*\n     * Public method: checkTemplateUrl(templateUrl)\n     */\n    function checkTemplateUrl(templateUrl) {\n      var pathElements = templateUrl.split('/');\n      var file = pathElements.pop();\n      var path = pathElements.join('/') + '/';\n\n      if(templateUrl !== undefined && templateUrl !== '') {\n        var fileExists = $q.when(File.checkFile(path, file))\n          .then(function(fileExists) {\n            if(fileExists) {\n              // $log.log('Template available', templateUrl);\n              return templateUrl;\n            } else {\n              // $log.warn('Template NOT available', templateUrl);\n              return path + 'template-not-available.html'; \n            }\n          });\n\n        return fileExists;\n      } else {\n        return path + 'template-not-defined.html';\n      }\n    }\n\n    /*\n     * Public method: setBasePath()\n     */\n    function setBasePath() {      \n      DS\n        .defaults\n        .basePath = app.apiUrl;\n    }\n\n  }\n\n}());","/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n *                                                                                     *\n * Copyright (C) 2015 Lukas Mayerhofer <lukas.mayerhofer@guh.guru>                     *\n *                                                                                     *\n * Permission is hereby granted, free of charge, to any person obtaining a copy        *\n * of this software and associated documentation files (the \"Software\"), to deal       *\n * in the Software without restriction, including without limitation the rights        *\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell           *\n * copies of the Software, and to permit persons to whom the Software is               *\n * furnished to do so, subject to the following conditions:                            *\n *                                                                                     *\n * The above copyright notice and this permission notice shall be included in all      *\n * copies or substantial portions of the Software.                                     *\n *                                                                                     *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR          *\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,            *\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE         *\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER              *\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,       *\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE       *\n * SOFTWARE.                                                                           *\n *                                                                                     *\n * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */\n\n(function() {\n  'use strict';\n\n  angular\n    .module('guh.models')\n    .factory('DSLogs', DSLogsFactory)\n    .run(function(DSLogs) {});\n\n  DSLogsFactory.$inject = ['$log', 'DS'];\n\n  function DSLogsFactory($log, DS) {\n    \n    var staticMethods = {};\n\n    /*\n     * DataStore configuration\n     */\n    var DSLogs = DS.defineResource({\n\n      // API configuration\n      endpoint: 'logs',\n\n      // Model configuration\n      idAttribute: 'id',\n      name: 'logs',\n      relations: {},\n\n      // Computed properties\n      computed: {},\n\n      // Instance methods\n      methods: {}\n\n    });\n\n    return DSLogs;\n\n  }\n\n}());","/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n *                                                                                     *\n * Copyright (C) 2015 Lukas Mayerhofer <lukas.mayerhofer@guh.guru>                     *\n *                                                                                     *\n * Permission is hereby granted, free of charge, to any person obtaining a copy        *\n * of this software and associated documentation files (the \"Software\"), to deal       *\n * in the Software without restriction, including without limitation the rights        *\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell           *\n * copies of the Software, and to permit persons to whom the Software is               *\n * furnished to do so, subject to the following conditions:                            *\n *                                                                                     *\n * The above copyright notice and this permission notice shall be included in all      *\n * copies or substantial portions of the Software.                                     *\n *                                                                                     *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR          *\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,            *\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE         *\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER              *\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,       *\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE       *\n * SOFTWARE.                                                                           *\n *                                                                                     *\n * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */\n\n(function() {\n  'use strict';\n\n  angular\n    .module('guh.models')\n    .factory('DSEventType', DSEventTypeFactory)\n    .run(function(DSEventType) {});\n\n  DSEventTypeFactory.$inject = ['$log', 'DS', 'modelsHelper'];\n\n  function DSEventTypeFactory($log, DS, modelsHelper) {\n    \n    var staticMethods = {};\n\n    /*\n     * DataStore configuration\n     */\n    var DSEventType = DS.defineResource({\n\n      // API configuration\n      endpoint: 'eventtypes',\n\n      // Model configuration\n      idAttribute: 'id',\n      name: 'eventType',\n      relations: {\n        belongsTo: {\n          deviceClass: {\n            localField: 'deviceClass',\n            localKey: 'deviceClassId',\n            parent: true\n          }\n        }\n      },\n\n      // Computed properties\n      computed: {},\n\n      // Instance methods\n      methods: {\n        getParamDescriptor: getParamDescriptor\n      },\n\n      // Lifecycle hooks\n      afterInject: function(resource, attrs) {\n        if(angular.isArray(attrs)) {\n          var arrayOfAttrs = attrs;\n          angular.forEach(arrayOfAttrs, function(attrs) {\n            _addUiData(resource, attrs);\n          });\n        } else {\n          _addUiData(resource, attrs);\n        }\n      }\n\n    });\n\n    return DSEventType;\n\n\n    /*\n     * Private method: _addUiData(resource, attrs)\n     */\n    function _addUiData(resource, attrs) {\n      var paramTypes = attrs.paramTypes;\n      var phrase = 'When ' + attrs.name;\n\n      // Add phrase for moods\n      if(angular.isArray(paramTypes) && paramTypes.length === 0) {\n        attrs.phrase = phrase + ' is detected';\n      } else {\n        attrs.phrase = phrase + ' is detected and parameters are';\n      }\n\n      // Add templateUrl to paramTypes\n      angular.forEach(paramTypes, function(paramType) {\n        paramType = modelsHelper.addUiData(paramType);\n      });\n    }\n\n\n    /*\n     * Public method: getParamDescriptors(paramType, value, operator)\n     */\n    function getParamDescriptor(paramType, value, operator) {\n      var paramDescriptor = {};\n\n      paramDescriptor = {\n        name: paramType.name,\n        operator: operator,\n        value: value\n      };\n\n      return paramDescriptor;\n    }\n\n  }\n\n}());","/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n *                                                                                     *\n * Copyright (C) 2015 Lukas Mayerhofer <lukas.mayerhofer@guh.guru>                     *\n *                                                                                     *\n * Permission is hereby granted, free of charge, to any person obtaining a copy        *\n * of this software and associated documentation files (the \"Software\"), to deal       *\n * in the Software without restriction, including without limitation the rights        *\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell           *\n * copies of the Software, and to permit persons to whom the Software is               *\n * furnished to do so, subject to the following conditions:                            *\n *                                                                                     *\n * The above copyright notice and this permission notice shall be included in all      *\n * copies or substantial portions of the Software.                                     *\n *                                                                                     *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR          *\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,            *\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE         *\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER              *\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,       *\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE       *\n * SOFTWARE.                                                                           *\n *                                                                                     *\n * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */\n\n(function() {\n  'use strict';\n\n  angular\n    .module('guh.models')\n    .factory('DSDevice', DSDeviceFactory)\n    .run(function(DSDevice) {});\n\n  DSDeviceFactory.$inject = ['$log', '$httpParamSerializer', 'DS', 'libs', 'app', 'websocketService'];\n\n  function DSDeviceFactory($log, $httpParamSerializer, DS, libs, app, websocketService) {\n    \n    var staticMethods = {};\n\n    /*\n     * DataStore configuration\n     */\n    var DSDevice = DS.defineResource({\n\n      // API configuration\n      endpoint: 'devices',\n\n      // Model configuration\n      idAttribute: 'id',\n      name: 'device',\n      relations: {\n        belongsTo: {\n          deviceClass: {\n            localField: 'deviceClass',\n            localKey: 'deviceClassId'\n          }\n        }\n\n        // Not working (error: \"Doh! You just changed the primary key of an object!\") because states are injected before the state primary keys are generated\n\n        // hasMany: {\n        //   state: {\n        //     localField: 'states',\n        //     foreignKey: 'deviceId'\n        //   }\n        // }\n      },\n\n      // Computed properties\n      computed: {},\n\n      // Instance methods\n      methods: {\n        // Websocket\n        subscribe: subscribe,\n        unsubscribe: unsubscribe,\n        \n        // API\n        executeAction: executeAction,\n        remove: remove,\n        getDescription: getDescription,\n        getEventDescriptor: getEventDescriptor,\n        getStateDescriptor: getStateDescriptor,\n        getAction: getAction\n      },\n\n      // Lifecycle hooks\n      afterInject: function(resource, attrs) {\n        if(angular.isArray(attrs)) {\n          var arrayOfAttrs = attrs;\n          angular.forEach(arrayOfAttrs, function(attrs) {\n            _addCustomName(resource, attrs);\n            _createStates(resource, attrs);\n          });\n        } else {\n          _addCustomName(resource, attrs);\n          _createStates(resource, attrs);\n        }\n      },\n\n      afterEject: function(resource, attrs) {\n        if(angular.isArray(attrs)) {\n          var arrayOfAttrs = attrs;\n          angular.forEach(arrayOfAttrs, function(attrs) {\n            _removeStates(resource, attrs);\n          });\n        } else {\n          _removeStates(resource, attrs);\n        }\n      }\n\n    });\n\n    angular.extend(DSDevice, {\n      add: add,\n      edit: edit,\n      pair: pair,\n      confirmPairing: confirmPairing\n    });\n\n    return DSDevice;\n\n\n    /*\n     * Private method: _addCustomName()\n     */\n    function _addCustomName(resource, attrs) {\n      var nameParameter = libs._.find(attrs.params, function(param) { return (param.name === 'name'); });\n      attrs.name = (nameParameter === undefined) ? 'Name' : nameParameter.value;\n    }\n\n    /*\n     * Private method: _createStates(resource, attrs);\n     */\n    function _createStates(resource, attrs) {\n      var deviceId = attrs.id;\n      var states = attrs.states;\n\n      angular.forEach(states, function(state, index) {\n        state.deviceId = deviceId;\n\n        var stateInstance = DS.createInstance('state', state);\n        DS.inject('state', stateInstance);\n\n        if(angular.isUndefined(attrs.states)) {\n          attrs.states = [];\n        }\n        attrs.states[index] = DS.get('state', '' + deviceId + '_' + state.stateTypeId);\n      });\n    }\n\n    /*\n     * Private method: _removeStates(resource, attrs)\n     */\n    function _removeStates(resource, attrs) {\n      $log.log('_removeStates', resource, attrs);\n\n      var deviceId = attrs.id;\n      var states = attrs.states;\n\n      angular.forEach(states, function(state, index) {\n        var ejectedItem = DS.eject('state', '' + deviceId + '_' + state.stateTypeId);\n        $log.log('ejected state', ejectedItem);\n      });\n    }\n\n\n    /*\n     * Public method: getDescription(delimiter)\n     */\n    function getDescription(delimiter) {\n      /* jshint validthis: true */\n      var self = this;\n      var vendorName = self.deviceClass.vendor.name;\n      var deviceClassName = self.deviceClass.name || '';\n\n      delimiter = delimiter || '-';\n\n      return (vendorName === deviceClassName) ? deviceClassName : (vendorName + delimiter + deviceClassName);\n    }\n\n    /*\n     * Public method: subscribe(cb)\n     */\n    function subscribe(cb) {\n      /* jshint validthis: true */\n      var self = this;\n\n      return websocketService.subscribe(self.id, cb);\n    }\n\n    /*\n     * Public method: unsubscribe()\n     */\n    function unsubscribe() {\n      /* jshint validthis: true */\n      var self = this;\n\n      return websocketService.unsubscribe(self.id);\n    }\n\n    /*\n     * Public method: pair(deviceClassId, deviceDescriptorId, deviceParams)\n     */\n    function pair(deviceClassId, deviceDescriptorId, deviceParams) {\n      var options = {};\n\n      options.deviceClassId = deviceClassId || '';\n\n      if(angular.isDefined(deviceDescriptorId) && deviceDescriptorId !== '') {\n        options.deviceDescriptorId = deviceDescriptorId;\n      } else {\n        options.deviceParams = deviceParams || [];\n      }\n\n      return DS\n        .adapters\n        .http\n        .POST(app.apiUrl + '/devices/pair', options);\n    }\n\n    /*\n     * Public method: confirmPairing(pairingTransactionId)\n     */\n    function confirmPairing(pairingTransactionId) {\n      var options = {};\n      \n      options.pairingTransactionId = pairingTransactionId;\n\n      return DS\n        .adapters\n        .http\n        .POST(app.apiUrl + '/devices/confirmpairing', options);      \n    }\n\n    /*\n     * Public method: add(deviceClassId, deviceDescriptorId, deviceParams)\n     */\n    function add(deviceClassId, deviceDescriptorId, deviceParams) {\n      var device = {};\n\n      // deviceClassId\n      if(angular.isDefined(deviceClassId) && deviceClassId  !== '') {\n        device.deviceClassId = deviceClassId;\n      }\n\n      // deviceDescriptorId or deviceParams\n      if(angular.isDefined(deviceDescriptorId) && deviceDescriptorId !== '') {\n        device.deviceDescriptorId = deviceDescriptorId;\n      } else if(angular.isDefined(deviceParams) && deviceParams !== []) {\n        device.deviceParams = deviceParams;\n      }\n\n      return DSDevice.create(device, {\n        cacheResponse: false\n      });\n    }\n\n    /*\n     * Public method: edit(deviceId, deviceData)\n     */\n    function edit(deviceId, deviceData) {\n      var device = {};\n      deviceData = deviceData || {};\n\n      device.deviceDescriptorId = deviceData.id || '';\n\n      device.deviceParams = [];\n      angular.forEach(deviceData.deviceParamTypes, function(deviceParamType) {\n        var deviceParam = {};\n\n        deviceParam.name = deviceParamType.name;\n        deviceParam.value = deviceParamType.value;\n\n        device.deviceParams.push(deviceParam);\n      });\n\n      return DSDevice.update(deviceId, {device: device});\n    }\n\n    /*\n     * Public method: executeAction()\n     */\n    function executeAction(actionType, params) {\n      /* jshint validthis: true */\n      var self = this;\n      var options = {};\n\n      // options.params = actionType.getParams();\n      options.params = params;\n\n      // return DS\n      //   .adapters\n      //   .http\n      //   .POST(app.apiUrl + '/devices/' + self.id + '/actions/' + actionType.id + '/execute.json', options);\n\n      return DS\n        .adapters\n        .http\n        .POST(app.apiUrl + '/devices/' + self.id + '/execute/' + actionType.id, options);\n    }\n\n    /*\n     * Public method: remove()\n     */\n    function remove(params) {\n      /* jshint validthis: true */\n      var self = this;\n      var options = {};\n\n      if(angular.isDefined(params) && params !== {}) {\n        options.params = {\n          params: params\n        };\n        options.paramSerializer = function(params) {\n          return $httpParamSerializer(params).replace(/%5B/g, '[').replace(/%5D/g, ']');\n        };\n      }\n\n      return DSDevice.destroy(self.id, options);\n    }\n\n    /*\n     * Public method: getEventDescriptor(eventType, paramDescriptors)\n     */\n    function getEventDescriptor(eventType, paramDescriptors) {\n      /* jshint validthis: true */\n      var self = this;\n      var eventDescriptor = {};\n\n      eventDescriptor.deviceId = self.id;\n      eventDescriptor.eventTypeId = eventType.id;\n\n      if(angular.isDefined(paramDescriptors) && paramDescriptors.length > 0) {\n        eventDescriptor.paramDescriptors = paramDescriptors;\n      }\n\n      return eventDescriptor;     \n    }\n\n    /*\n     * Public method: getStateDescriptor(stateType, paramDescriptor)\n     */\n    function getStateDescriptor(stateType, paramDescriptor) {\n      /* jshint validthis: true */\n      var self = this;\n      var stateDescriptor = {};\n\n      stateDescriptor.deviceId = self.id;\n      stateDescriptor.operator = paramDescriptor.operator;\n      stateDescriptor.stateTypeId = stateType.id;\n      stateDescriptor.value = paramDescriptor.value;\n      \n      return stateDescriptor;\n    }\n\n\n    /*\n     * Public method: getAction(actionType, params)\n     */\n    function getAction(actionType, params) {\n      /* jshint validthis: true */\n      var self = this;\n      var action = {};\n      var ruleActionParams = [];\n\n      ruleActionParams = actionType.getRuleActionParams(params);\n      if(ruleActionParams.length > 0) {\n        action.ruleActionParams = ruleActionParams;\n      }\n\n      action.actionTypeId = actionType.id;\n      action.deviceId = self.id;\n\n      return action;\n    }\n\n  }\n\n}());","/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n *                                                                                     *\n * Copyright (C) 2015 Lukas Mayerhofer <lukas.mayerhofer@guh.guru>                     *\n *                                                                                     *\n * Permission is hereby granted, free of charge, to any person obtaining a copy        *\n * of this software and associated documentation files (the \"Software\"), to deal       *\n * in the Software without restriction, including without limitation the rights        *\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell           *\n * copies of the Software, and to permit persons to whom the Software is               *\n * furnished to do so, subject to the following conditions:                            *\n *                                                                                     *\n * The above copyright notice and this permission notice shall be included in all      *\n * copies or substantial portions of the Software.                                     *\n *                                                                                     *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR          *\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,            *\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE         *\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER              *\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,       *\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE       *\n * SOFTWARE.                                                                           *\n *                                                                                     *\n * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */\n\n(function() {\n  'use strict';\n\n  angular\n    .module('guh.models')\n    .factory('DSDeviceClassStateType', DSDeviceClassStateTypeFactory)\n    .run(function(DSDeviceClassStateType) {});\n\n  DSDeviceClassStateTypeFactory.$inject = ['$log', 'DS', 'modelsHelper'];\n\n  function DSDeviceClassStateTypeFactory($log, DS, modelsHelper) {\n    \n    var staticMethods = {};\n\n    /*\n     * DataStore configuration\n     */\n    var DSDeviceClassStateType = DS.defineResource({\n\n      // Model configuration\n      name: 'deviceClassStateType',\n      relations: {\n        belongsTo: {\n          deviceClass: {\n            localField: 'deviceClass',\n            localKey: 'deviceClassId'\n          },\n          stateType: {\n            localField: 'stateType',\n            localKey: 'stateTypeId'\n          }\n        }\n      }\n\n    });\n\n    return DSDeviceClassStateType;\n\n  }\n\n}());","/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n *                                                                                     *\n * Copyright (C) 2015 Lukas Mayerhofer <lukas.mayerhofer@guh.guru>                     *\n *                                                                                     *\n * Permission is hereby granted, free of charge, to any person obtaining a copy        *\n * of this software and associated documentation files (the \"Software\"), to deal       *\n * in the Software without restriction, including without limitation the rights        *\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell           *\n * copies of the Software, and to permit persons to whom the Software is               *\n * furnished to do so, subject to the following conditions:                            *\n *                                                                                     *\n * The above copyright notice and this permission notice shall be included in all      *\n * copies or substantial portions of the Software.                                     *\n *                                                                                     *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR          *\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,            *\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE         *\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER              *\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,       *\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE       *\n * SOFTWARE.                                                                           *\n *                                                                                     *\n * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */\n\n(function() {\n  'use strict';\n\n  angular\n    .module('guh.models')\n    .factory('DSDeviceClass', DSDeviceClassFactory)\n    .run(function(DSDeviceClass) {});\n\n  DSDeviceClassFactory.$inject = ['$log', 'DS', 'DSHttpAdapter', 'app', 'libs', 'modelsHelper', 'DSDeviceClassActionType', 'DSDeviceClassEventType', 'DSDeviceClassStateType'];\n\n  function DSDeviceClassFactory($log, DS, DSHttpAdapter, app, libs, modelsHelper, DSDeviceClassActionType, DSDeviceClassEventType, DSDeviceClassStateType) {\n    \n    var staticMethods = {};\n    var deviceClassActionTypesId = 0;\n    var deviceClassEventTypesId = 0;\n    var deviceClassStateTypesId = 0;\n\n    /*\n     * DataStore configuration\n     */\n    var DSDeviceClass = DS.defineResource({\n\n      // API configuration\n      endpoint: 'deviceclasses',\n\n      // Model configuration\n      idAttribute: 'id',\n      name: 'deviceClass',\n      relations: {\n        belongsTo: {\n          vendor: {\n            localField: 'vendor',\n            localKey: 'vendorId',\n            // parent: true\n          }\n        },\n        hasMany: {\n          deviceClassActionType: {\n            localField: 'deviceClassActionTypes',\n            foreignKey: 'deviceClassId'\n          },\n          // eventType: {\n          //   localField: 'eventTypes',\n          //   foreignKey: 'deviceClassId'\n          // },\n          deviceClassEventType: {\n            localField: 'deviceClassEventTypes',\n            foreignKey: 'deviceClassId'\n          },\n          deviceClassStateType: {\n            localField: 'deviceClassStateTypes',\n            foreignKey: 'deviceClassId'\n          }\n        }\n      },\n\n      // Computed properties\n      computed: {\n        templateUrl: ['name', _addUiTemplate]\n      },\n\n      // Instance methods\n      methods: {\n        discover: discover,\n        getCreateMethod: getCreateMethod,\n        getSetupMethod: getSetupMethod\n      },\n\n      // Lifecycle hooks\n      afterInject: function(resource, attrs) {\n        if(angular.isArray(attrs)) {\n          var arrayOfAttrs = attrs;\n          angular.forEach(arrayOfAttrs, function(attrs) {\n            _addUiData(resource, attrs);\n            _mapClassType(resource, attrs);\n            _mapStates(resource, attrs);\n            _createDeviceClassActionsTypes(resource, attrs);\n          });\n        } else {\n          _addUiData(resource, attrs);\n          _mapClassType(resource, attrs);\n          _mapStates(resource, attrs);\n          _createDeviceClassActionsTypes(resource, attrs);\n        }\n      }\n\n    });\n\n    DSDeviceClass.getAllActionTypes = function(deviceClassId) {\n      var deviceClassActionTypes = DSDeviceClassActionType.getAll();\n      var deviceClassActionTypesFiltered = deviceClassActionTypes.filter(function(deviceClassActionType) {\n        return deviceClassActionType.deviceClassId === deviceClassId;\n      });\n      var deviceClass = DS.get('deviceClass', deviceClassId);\n      var actionTypes = [];\n\n      angular.forEach(deviceClassActionTypesFiltered, function(deviceClassActionType) {\n        if(deviceClassActionType.deviceClassId === deviceClassId) {\n          var actionType = DS.get('actionType', deviceClassActionType.actionTypeId);\n          actionTypes.push(actionType);\n        }\n      });\n\n      return actionTypes;\n    };\n\n    DSDeviceClass.getAllEventTypes = function(deviceClassId) {\n      var deviceClassEventTypes = DSDeviceClassEventType.getAll();\n      var deviceClassEventTypesFiltered = deviceClassEventTypes.filter(function(deviceClassEventType) {\n        return deviceClassEventType.deviceClassId === deviceClassId;\n      });\n      var deviceClass = DS.get('deviceClass', deviceClassId);\n      var eventTypes = [];\n\n      angular.forEach(deviceClassEventTypesFiltered, function(deviceClassEventType) {\n        if(deviceClassEventType.deviceClassId === deviceClassId) {\n          var eventType = DS.get('eventType', deviceClassEventType.eventTypeId);\n          eventTypes.push(eventType);\n        }\n      });\n\n      return eventTypes;\n    };\n\n    DSDeviceClass.getAllStateTypes = function(deviceClassId) {\n      var deviceClassStateTypes = DSDeviceClassStateType.getAll();\n      var deviceClassStateTypesFiltered = deviceClassStateTypes.filter(function(deviceClassStateType) {\n        return deviceClassStateType.deviceClassId === deviceClassId;\n      });\n      var deviceClass = DS.get('deviceClass', deviceClassId);\n      var stateTypes = [];\n\n      angular.forEach(deviceClassStateTypesFiltered, function(deviceClassStateType) {\n        if(deviceClassStateType.deviceClassId === deviceClassId) {\n          var stateType = DS.get('stateType', deviceClassStateType.stateTypeId);\n          stateTypes.push(stateType);\n        }\n      });\n\n      return stateTypes;\n    };\n\n    return DSDeviceClass;\n\n\n    /*\n     * Private method: _getInputPath(name, filename)\n     */\n    function _getInputPath(name, filename) {\n      var classType = _getClassType(name);\n\n      if(classType === 'device' || classType === 'gateway') {\n        return app.basePaths.devices + 'detail/device-class-templates/' + filename + app.fileExtensions.html;\n      } else if(classType === 'service' || classType === 'dev-service') {\n        return app.basePaths.services + 'detail/device-class-templates/' + filename + app.fileExtensions.html;\n      } else {\n        return '';\n      }\n    }\n\n    /*\n     * Private method: _addUiTemplate(name)\n     */\n    function _addUiTemplate(name) {\n      // Example: 'Elro Remote' => 'elro-remote'\n      var templateName = name\n        .toLowerCase()\n        .replace(/\\s/g, '-')\n        .replace(/([.*+?^=!:${}()|\\[\\]\\/\\\\])/g, '');\n      var templateUrl = _getInputPath(name, 'device-class-' + templateName);\n\n      return modelsHelper.checkTemplateUrl(templateUrl);\n    }\n\n    /*\n     * Private method:_createDeviceClassActionsTypes()\n     */\n    function _createDeviceClassActionsTypes(resource, attrs) {\n      var deviceClassActionTypes = DS.getAll('deviceClassActionType');\n      var deviceClassEventTypes = DS.getAll('deviceClassEventType');\n      var deviceClassStateTypes = DS.getAll('deviceClassStateType');\n      var actionTypes = attrs.actionTypes;\n      var eventTypes = attrs.eventTypes;\n      var stateTypes = attrs.stateTypes;\n      var deviceClassId = attrs.id;\n\n      // ActionTypes\n      angular.forEach(actionTypes, function(actionType) {\n        // Create actionType\n        var actionTypeInstance = DS.createInstance('actionType', actionType);\n        DS.inject('actionType', actionTypeInstance);\n\n        // Filtered deviceClassActionTypes\n        var deviceClassActionTypesFiltered = deviceClassActionTypes.filter(function(deviceClassActionType) {\n          return deviceClassActionType.deviceClassId === deviceClassId && deviceClassActionType.actionTypeId === actionType.id;\n        });\n\n        // Only inject if not already there\n        if(angular.isArray(deviceClassActionTypesFiltered) && deviceClassActionTypesFiltered.length === 0) {\n          // Create membership (deviceClass <-> actionType)\n          deviceClassActionTypesId = deviceClassActionTypesId + 1;\n          var deviceClassActionTypeInstance = DS.createInstance('deviceClassActionType', {\n            id: deviceClassActionTypesId,\n            deviceClassId: deviceClassId,\n            actionTypeId: actionType.id\n          });\n          DS.inject('deviceClassActionType', deviceClassActionTypeInstance);\n        }\n      });\n\n      // EventTypes\n      angular.forEach(eventTypes, function(eventType) {\n        // Create eventType\n        var eventTypeInstance = DS.createInstance('eventType', eventType);\n        DS.inject('eventType', eventTypeInstance);\n\n        // Filtered deviceClassEventTypes\n        var deviceClassEventTypesFiltered = deviceClassEventTypes.filter(function(deviceClassEventType) {\n          return deviceClassEventType.deviceClassId === deviceClassId && deviceClassEventType.eventTypeId === eventType.id;\n        });\n\n        // Only inject if not already there\n        if(angular.isArray(deviceClassEventTypesFiltered) && deviceClassEventTypesFiltered.length === 0) {\n          // Create membership (deviceClass <-> eventType)\n          deviceClassEventTypesId = deviceClassEventTypesId + 1;\n          var deviceClassEventTypeInstance = DS.createInstance('deviceClassEventType', {\n            id: deviceClassEventTypesId,\n            deviceClassId: deviceClassId,\n            eventTypeId: eventType.id\n          });\n          DS.inject('deviceClassEventType', deviceClassEventTypeInstance);\n        }\n      });\n\n      // StateTypes\n      angular.forEach(stateTypes, function(stateType) {\n        // Create stateType\n        var stateTypeInstance = DS.createInstance('stateType', stateType);\n        DS.inject('stateType', stateTypeInstance);\n\n        // Filtered deviceClassStateTypes\n        var deviceClassStateTypesFiltered = deviceClassStateTypes.filter(function(deviceClassStateType) {\n          return deviceClassStateType.deviceClassId === deviceClassId && deviceClassStateType.stateTypeId === stateType.id;\n        });\n\n        // Only inject if not already there\n        if(angular.isArray(deviceClassStateTypesFiltered) && deviceClassStateTypesFiltered.length === 0) {\n          // Create membership (deviceClass <-> actionType)\n          deviceClassStateTypesId = deviceClassStateTypesId + 1;\n          var deviceClassStateTypeInstance = DS.createInstance('deviceClassStateType', {\n            id: deviceClassStateTypesId,\n            deviceClassId: deviceClassId,\n            stateTypeId: stateType.id\n          });\n          DS.inject('deviceClassStateType', deviceClassStateTypeInstance);\n        }\n      });\n    }\n\n    /*\n     * Private method: _addUiData(resource, attrs)\n     */\n    function _addUiData(resource, attrs) {\n      var discoveryParamTypes = attrs.discoveryParamTypes;\n      var paramTypes = attrs.paramTypes;\n      // var stateTypes = attrs.stateTypes;\n\n      attrs = modelsHelper.addUiData(attrs);\n\n      // discoveryParamTypes\n      angular.forEach(discoveryParamTypes, function(paramType) {\n        paramType = modelsHelper.addUiData(paramType);\n      });\n\n      // paramTypes\n      angular.forEach(paramTypes, function(paramType) {\n        paramType = modelsHelper.addUiData(paramType);\n      });\n\n      // stateTypes\n      // angular.forEach(stateTypes, function(stateType) {\n      //   stateType = modelsHelper.addUiData(stateType);\n      // });\n    }\n\n    /*\n     * Private method: _getClassType(name)\n     */\n    function _getClassType(name) {\n      var devServices = [\n        'Mock Device',\n        'Mock Device (Auto created)',\n        'Mock Device (Child)',\n        'Mock Device (Display Pin)',\n        'Mock Device (Parent)',\n        'Mock Device (Push Button)'\n      ];\n      var devices = [\n        'Elro Bulb (AB440L)',\n        'Elro outdoor socket (AB440WD)',\n        'Elro Socket (AB440D)',\n        'Elro Socket (AB440S)',\n        'Hue Light',\n        'Intertechno switch',\n        'IR receiver',\n        'Lirc',\n        'LG Smart Tv',\n        'Max! Cube LAN Gateway',\n        'Max! Radiator Thermostat',\n        'Max! Wall Thermostat',\n        'RF Controller (LN-CON-RF20B)',\n        'Shutter (RSM900R)',\n        'Tune',\n        'Unitec switch (48111)',\n        'WeMo Switch',\n        'WiFi Device'\n      ];\n      var gateways = [\n        'Hue Bridge'\n      ];\n      var moods = [\n        'Mood'\n      ];\n      var services = [\n        'aWATTar',\n        'Alarm',\n        'Application launcher',\n        'Bashscript launcher',\n        'Button',\n        'Countdown',\n        'Custom mail',\n        'Google mail',\n        'Kodi',\n        'ON/OFF Button',\n        'Today',\n        'Toggle Button',\n        'UDP Commander',\n        'Wake On Lan',\n        'Weather',\n        'Yahoo mail'\n      ];\n      var classType = 'device';\n\n      if(libs._.contains(devServices, name)) {\n        classType = 'dev-service';\n      } else if(libs._.contains(moods, name)) {\n        classType = 'mood';\n      } else if(libs._.contains(gateways, name)) {\n        classType = 'gateway';\n      } else if(libs._.contains(services, name)) {\n        classType = 'service';\n      }\n\n      return classType;\n    }\n\n    /*\n     * Private method: _mapClassType(resource, attrs)\n     */\n    function _mapClassType(resource, attrs) {\n      attrs.classType = _getClassType(attrs.name);\n    }\n\n\n    /*\n     * Private method: _mapStates(resource, attrs)\n     */\n    function _mapStates(resource, attrs) {\n      var actionTypes = attrs.actionTypes;\n      var eventTypes = attrs.eventTypes;\n      var stateTypes = attrs.stateTypes;\n      var stateIds = libs._.pluck(stateTypes, 'id');\n\n      // Map actionTypes\n      angular.forEach(actionTypes, function(actionType) {\n        // Check if current actionType belongs to a stateType\n        if(libs._.contains(stateIds, actionType.id)) {\n          actionType.hasState = true;\n        } else {\n          actionType.hasState = false;\n        }\n      });\n\n      // Map eventTypes\n      angular.forEach(eventTypes, function(eventType) {\n        // Check if current eventType belongs to a stateType\n        if(libs._.contains(stateIds, eventType.id)) {\n          eventType.hasState = true;\n        } else {\n          eventType.hasState = false;\n        }\n      });\n    }\n\n\n    /*\n     * Public method: discover(discoveryParams)\n     */\n    function discover(discoveryParams) {\n      /* jshint validthis: true */\n      var self = this;\n\n      return DSHttpAdapter.GET(app.apiUrl + '/deviceclasses/' + self.id + '/discover?params=' + angular.toJson(discoveryParams));\n    }\n\n    /*\n     * Public method: getCreateMethod()\n     */\n    function getCreateMethod() {\n      /* jshint validthis: true */\n      var self = this;\n      var addBasePath = 'app/components/devices/add/pairing-templates/';\n      var editBasePath = 'app/components/devices/edit/pairing-templates/';\n      var createMethodData = null;\n\n      if(self.createMethods.indexOf('CreateMethodDiscovery') > -1) {\n        createMethodData = {\n          title: 'Discovery',\n          addTemplate: addBasePath + 'devices-add-create-discovery.html',\n          editTemplate: editBasePath + 'devices-edit-create-discovery.html'\n        };\n      } else if(self.createMethods.indexOf('CreateMethodUser') > -1) {\n        createMethodData = {\n          title: 'User',\n          addTemplate: addBasePath + 'devices-add-create-user.html',\n          editTemplate: editBasePath + 'devices-edit-create-user.html'\n        };\n      } else if(self.createMethods.indexOf('CreateMethodAuto') > -1) {\n        createMethodData = {\n          title: 'Auto',\n          // addTemplate: addBasePath + 'devices-add-create-user.html',\n          // editTemplate: editBasePath + 'devices-edit-create-user.html'\n          addTemplate: null,\n          ediTemplate: null\n        };\n      } else {\n        $log.error('CreateMethod not implemented.');\n      }\n\n      // createMethodData.addTemplate = modelsHelper.checkTemplateUrl(createMethodData.addTemplate);\n\n      return createMethodData;\n    }\n\n    /*\n     * Public method: getSetupMethod()\n     */\n    function getSetupMethod() {\n      /* jshint validthis: true */\n      var self = this;\n      var addBasePath = 'app/components/devices/add/pairing-templates/';\n      var editBasePath = 'app/components/devices/edit/pairing-templates/';\n      var setupMethodData = {};\n\n      switch(self.setupMethod) {\n        case 'SetupMethodJustAdd':\n          setupMethodData = null;\n          break;\n        case 'SetupMethodDisplayPin':\n          setupMethodData = {\n            title: 'Display Pin',\n            addTemplate: addBasePath + 'devices-add-setup-display-pin.html',\n            editTemplate: editBasePath + 'devices-edit-setup-display-pin.html'\n          };\n          break;\n        case 'SetupMethodEnterPin':\n          setupMethodData = {\n            title: 'Enter Pin',\n            addTemplate: addBasePath + 'devices-add-setup-enter-pin.html',\n            editTemplate: editBasePath + 'devices-edit-setup-enter-pin.html'\n          };\n          break;\n        case 'SetupMethodPushButton':\n          setupMethodData = {\n            title: 'Push Button',\n            addTemplate: addBasePath + 'devices-add-setup-push-button.html',\n            editTemplate: editBasePath + 'devices-edit-setup-push-button.html'\n          };\n          break;\n        default:\n          $log.error('SetupMethod not implemented.');\n          break;\n      }\n\n      return setupMethodData;\n    }\n\n\n  }\n\n}());","/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n *                                                                                     *\n * Copyright (C) 2015 Lukas Mayerhofer <lukas.mayerhofer@guh.guru>                     *\n *                                                                                     *\n * Permission is hereby granted, free of charge, to any person obtaining a copy        *\n * of this software and associated documentation files (the \"Software\"), to deal       *\n * in the Software without restriction, including without limitation the rights        *\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell           *\n * copies of the Software, and to permit persons to whom the Software is               *\n * furnished to do so, subject to the following conditions:                            *\n *                                                                                     *\n * The above copyright notice and this permission notice shall be included in all      *\n * copies or substantial portions of the Software.                                     *\n *                                                                                     *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR          *\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,            *\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE         *\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER              *\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,       *\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE       *\n * SOFTWARE.                                                                           *\n *                                                                                     *\n * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */\n\n(function() {\n  'use strict';\n\n  angular\n    .module('guh.models')\n    .factory('DSDeviceClassEventType', DSDeviceClassEventTypeFactory)\n    .run(function(DSDeviceClassEventType) {});\n\n  DSDeviceClassEventTypeFactory.$inject = ['$log', 'DS', 'modelsHelper'];\n\n  function DSDeviceClassEventTypeFactory($log, DS, modelsHelper) {\n    \n    var staticMethods = {};\n\n    /*\n     * DataStore configuration\n     */\n    var DSDeviceClassEventType = DS.defineResource({\n\n      // Model configuration\n      name: 'deviceClassEventType',\n      relations: {\n        belongsTo: {\n          deviceClass: {\n            localField: 'deviceClass',\n            localKey: 'deviceClassId'\n          },\n          eventType: {\n            localField: 'eventType',\n            localKey: 'eventTypeId'\n          }\n        }\n      }\n\n    });\n\n    return DSDeviceClassEventType;\n\n  }\n\n}());","/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n *                                                                                     *\n * Copyright (C) 2015 Lukas Mayerhofer <lukas.mayerhofer@guh.guru>                     *\n *                                                                                     *\n * Permission is hereby granted, free of charge, to any person obtaining a copy        *\n * of this software and associated documentation files (the \"Software\"), to deal       *\n * in the Software without restriction, including without limitation the rights        *\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell           *\n * copies of the Software, and to permit persons to whom the Software is               *\n * furnished to do so, subject to the following conditions:                            *\n *                                                                                     *\n * The above copyright notice and this permission notice shall be included in all      *\n * copies or substantial portions of the Software.                                     *\n *                                                                                     *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR          *\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,            *\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE         *\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER              *\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,       *\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE       *\n * SOFTWARE.                                                                           *\n *                                                                                     *\n * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */\n\n(function() {\n  'use strict';\n\n  angular\n    .module('guh.models')\n    .factory('DSDeviceClassActionType', DSDeviceClassActionTypeFactory)\n    .run(function(DSDeviceClassActionType) {});\n\n  DSDeviceClassActionTypeFactory.$inject = ['$log', 'DS', 'modelsHelper'];\n\n  function DSDeviceClassActionTypeFactory($log, DS, modelsHelper) {\n    \n    var staticMethods = {};\n\n    /*\n     * DataStore configuration\n     */\n    var DSDeviceClassActionType = DS.defineResource({\n\n      // Model configuration\n      name: 'deviceClassActionType',\n      relations: {\n        belongsTo: {\n          deviceClass: {\n            localField: 'deviceClass',\n            localKey: 'deviceClassId'\n          },\n          actionType: {\n            localField: 'actionType',\n            localKey: 'actionTypeId'\n          }\n        }\n      }\n\n    });\n\n    return DSDeviceClassActionType;\n\n  }\n\n}());","/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n *                                                                                     *\n * Copyright (C) 2015 Lukas Mayerhofer <lukas.mayerhofer@guh.guru>                     *\n *                                                                                     *\n * Permission is hereby granted, free of charge, to any person obtaining a copy        *\n * of this software and associated documentation files (the \"Software\"), to deal       *\n * in the Software without restriction, including without limitation the rights        *\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell           *\n * copies of the Software, and to permit persons to whom the Software is               *\n * furnished to do so, subject to the following conditions:                            *\n *                                                                                     *\n * The above copyright notice and this permission notice shall be included in all      *\n * copies or substantial portions of the Software.                                     *\n *                                                                                     *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR          *\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,            *\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE         *\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER              *\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,       *\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE       *\n * SOFTWARE.                                                                           *\n *                                                                                     *\n * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */\n\n(function() {\n  'use strict';\n\n  angular\n    .module('guh.models')\n    .factory('DSActionType', DSActionTypeFactory)\n    .run(function(DSActionType) {});\n\n  DSActionTypeFactory.$inject = ['$log', 'DS', 'modelsHelper'];\n\n  function DSActionTypeFactory($log, DS, modelsHelper) {\n    \n    var staticMethods = {};\n\n    /*\n     * DataStore configuration\n     */\n    var DSActionType = DS.defineResource({\n\n      // API configuration\n      endpoint: 'actiontypes',\n\n      // Model configuration\n      idAttribute: 'id',\n      name: 'actionType',\n      relations: {\n        // belongsTo: {\n        //   deviceClass: {\n        //     localField: 'deviceClass',\n        //     localKey: 'deviceClassId',\n        //     parent: true\n        //   }\n        // },\n        hasMany: {\n          deviceClassActionType: {\n            localField: 'deviceClassActionTypes',\n            foreignKey: 'actionTypeId'\n          },\n        }\n      },\n\n      // Computed properties\n      computed: {},\n\n      // Instance methods\n      methods: {\n        getParams: getParams,\n        getRuleActionParams: getRuleActionParams\n      },\n\n      // Lifecycle hooks\n      afterInject: function(resource, attrs) {\n        if(angular.isArray(attrs)) {\n          var arrayOfAttrs = attrs;\n          angular.forEach(arrayOfAttrs, function(attrs) {\n            _addUiData(resource, attrs);\n          });\n        } else {\n          _addUiData(resource, attrs);\n        }\n      }\n\n    });\n\n    return DSActionType;\n\n\n    /*\n     * Private method: _addUiData(resource, attrs)\n     */\n    function _addUiData(resource, attrs) {\n      var paramTypes = attrs.paramTypes;\n      \n      attrs.phrase = 'Execute \"' + attrs.name + '\"';\n\n      // Add phrase for moods\n      if(angular.isArray(paramTypes) && paramTypes.length > 0) {\n        attrs.phrase = attrs.phrase + ' with parameters';\n      }\n\n      // Add templateUrl to paramTypes\n      var isChildOfActionType = true;\n      angular.forEach(paramTypes, function(paramType) {\n        paramType = modelsHelper.addUiData(paramType, isChildOfActionType);\n        // paramType.dependsOnTrigger = false;\n      });\n\n      // Add templateUrl to actionType & paramTypes\n      attrs = modelsHelper.addUiData(attrs);\n    }\n\n\n    /*\n     * Public method: getParams()\n     */\n    function getParams() {\n      /* jshint validthis: true */\n      var self = this;\n      var params = [];\n      var paramTypes = self.paramTypes;\n\n      angular.forEach(paramTypes, function(paramType) {\n        params.push({\n          name: paramType.name,\n          value: paramType.value\n        });\n      });\n\n      return params;\n    }\n\n    /*\n     * Public method: getRuleActionParams(params, actionParamType, eventParamType)\n     */\n    function getRuleActionParams(params, actionParamType, eventParamType) {\n      /* jshint validthis: true */\n      var self = this;\n      var ruleActionParams = [];\n\n      angular.forEach(params, function(param) {\n        if(actionParamType !== undefined && eventParamType !== undefined) {\n          if(param.name === actionParamType.name) {\n            ruleActionParams.push({\n              name: param.name,\n              eventParamName: eventParamType.name,\n              eventTypeId: eventParamType.eventDescriptor.eventTypeId\n            });\n          } else {\n            ruleActionParams.push({\n              name: param.name,\n              value: param.value\n            });\n          }\n        } else {\n          ruleActionParams.push({\n            name: param.name,\n            value: param.value\n          });\n        }\n      });\n\n      return ruleActionParams;\n    }\n\n  }\n\n}());","/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n *                                                                                     *\n * Copyright (C) 2015 Lukas Mayerhofer <lukas.mayerhofer@guh.guru>                     *\n *                                                                                     *\n * Permission is hereby granted, free of charge, to any person obtaining a copy        *\n * of this software and associated documentation files (the \"Software\"), to deal       *\n * in the Software without restriction, including without limitation the rights        *\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell           *\n * copies of the Software, and to permit persons to whom the Software is               *\n * furnished to do so, subject to the following conditions:                            *\n *                                                                                     *\n * The above copyright notice and this permission notice shall be included in all      *\n * copies or substantial portions of the Software.                                     *\n *                                                                                     *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR          *\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,            *\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE         *\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER              *\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,       *\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE       *\n * SOFTWARE.                                                                           *\n *                                                                                     *\n * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */\n\n(function() {\n  'use strict';\n\n  angular\n    .module('guh.logging', [\n      'guh.logging.hooks'\n    ])\n    .config(config);\n\n  config.$inject = ['$provide'];\n\n  function config($provide) {\n    // Exceptions\n    // $provide.decorator('$exceptionHandler', ['$injector', '$delegate', 'Logging', function($injector, $delegate, Logging) {\n    //   if(!Logging.angularServiceEnhanced.$exceptionHandler) {\n    //     return $delegate;\n    //   }\n\n    //   return function(exception, cause) {\n    //     $delegate(exception, cause);\n    //   }\n    // }]);\n\n    // Logs\n    $provide.decorator('$log', ['$injector', '$delegate', 'guhLogging', function($injector, $delegate, guhLogging) {\n      var decorator = {\n        log: log,\n        info: info,\n        warn: warn,\n        error: error\n      };\n\n      return decorator;\n\n\n      function _applyCallbacks(logType, args) {\n        var logTypeData = guhLogging.getLogType(logType);\n\n        // Pre callbacks\n        angular.forEach(logTypeData.preCallbacks, function(preCallbackProvider) {\n          var preCallback = $injector.get(preCallbackProvider);\n          preCallback.call(preCallback, {\n            type: logType,\n            args: args\n          });\n        });\n\n        // Console\n        if(guhLogging.isEnhanced(logType)) {\n          $delegate[logType].apply($delegate, args);\n          guhLogging[logType].apply(null, args);\n        } else {\n          $delegate[logType].apply($delegate, args);\n        }\n\n        // Post callbacks\n        angular.forEach(logTypeData.postCallbacks, function(postCallbackProvider) {\n          var postCallback = $injector.get(postCallbackProvider);\n          postCallback.call(postCallback, {\n            type: logType,\n            args: args\n          });\n        });\n      }\n\n      function log() {\n        var args = arguments;\n        _applyCallbacks('log', args);\n      }\n\n      function info() {\n        var args = arguments;\n        _applyCallbacks('info', args);\n      }\n\n      function warn() {\n        var args = arguments;\n        _applyCallbacks('warn', args);\n      }\n\n      function error() {\n        var args = arguments;\n        _applyCallbacks('error', args);\n      }\n    }]);\n  }\n\n}());\n","/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n *                                                                                     *\n * Copyright (C) 2015 Lukas Mayerhofer <lukas.mayerhofer@guh.guru>                     *\n *                                                                                     *\n * Permission is hereby granted, free of charge, to any person obtaining a copy        *\n * of this software and associated documentation files (the \"Software\"), to deal       *\n * in the Software without restriction, including without limitation the rights        *\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell           *\n * copies of the Software, and to permit persons to whom the Software is               *\n * furnished to do so, subject to the following conditions:                            *\n *                                                                                     *\n * The above copyright notice and this permission notice shall be included in all      *\n * copies or substantial portions of the Software.                                     *\n *                                                                                     *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR          *\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,            *\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE         *\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER              *\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,       *\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE       *\n * SOFTWARE.                                                                           *\n *                                                                                     *\n * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */\n\n(function() {\n  'use strict';\n\n  angular\n    .module('guh.logging')\n    .provider('guhLogging', Logging);\n\n  Logging.$inject = ['$injector'];\n\n  function Logging($injector) {\n    var _logTypes = {\n      log: {},\n      info: {},\n      warn: {},\n      error: {}\n    };\n\n    var _hooks = {\n      http: 'guhLoggingHttpHook',\n      broadcast: 'guhLoggingBroadcastHook',\n      websocket: null\n    };\n\n    var provider = {\n      $get: $get,\n      enhance: enhance,\n      before: before,\n      after: after,\n      decorate: decorate\n    };\n\n    return provider;\n\n\n    // function _getArrayFromString(string) {\n    //   if(!angular.isString(string)) {\n    //     return;\n    //   }\n    // }\n\n    function _addHooks(prePost, logTypes, hooks) {\n      try {\n        if(angular.isUndefined(logTypes) || logTypes === null || !angular.isString(logTypes)) {\n          throw 'Wrong argument type. The argument \"logTypes\" should be a comma seperated String.';\n        }\n        if(angular.isDefined(hooks) && hooks !== null && !angular.isString(hooks)) {\n          throw 'Wrong argument type. The argument \"hooks\" should be a comma seperated String.';\n        }\n      } catch(error) {\n        return error;\n      }\n\n      var logTypesArray = logTypes.replace(/\\s+/g, '').split(',');\n      var hooksArray = hooks.replace(/\\s+/g, '').split(',');\n      var logTypeCallbacks = [];\n\n      // Check hooks\n      var callback;\n      angular.forEach(hooksArray, function(hook) {\n        if(angular.isDefined(_hooks[hook]) && _hooks[hook] !== null) {\n          logTypeCallbacks.push(_hooks[hook]);\n        }\n      });\n\n      // Initialize all log types with preCallbacks = [] / postCallbacks = []\n      angular.forEach(_logTypes, function(_logType) {\n        _logType[prePost + 'Callbacks'] = [];\n      });\n\n      // Set defined callbacks for log types\n      angular.forEach(logTypesArray, function(logType) {\n        if(angular.isDefined(_logTypes[logType])) {\n          _logTypes[logType][prePost + 'Callbacks'] = logTypeCallbacks;\n        }\n      });\n    }\n\n    function _getEnhancedArguments(args) {\n      // console.log('args', args, angular.isObject(args), angular.isArray(args));\n\n      var argsArray = args ? [].slice.call(args) : args;\n\n      // console.log('argsArray', argsArray, argsArray.length, angular.isArray(argsArray), argsArray[0]);\n\n      if(argsArray.length === 1) {\n        return argsArray[0];\n      } else {\n        return args;\n      }\n    }\n\n    function _addTimestamp() {\n\n    }\n\n\n    function $get() {\n      var service = {\n        isEnhanced: isEnhanced,\n        log: log,\n        info: info,\n        warn: warn,\n        error: error,\n        getLogType: getLogType\n      };\n\n      return service;\n\n\n      function isEnhanced(logType) {\n        return (angular.isDefined(_logTypes[logType]) && angular.isDefined(_logTypes[logType].enhanced)) ? _logTypes[logType].enhanced : false;\n      }\n\n      function log() {\n        // var args = _getEnhancedArguments(arguments);\n        // console.log(arguments);\n      }\n\n      function info() {\n        // var args = _getEnhancedArguments(arguments);\n        // console.info(arguments);\n      }\n\n      function warn() {\n        // var args = _getEnhancedArguments(arguments);\n        // console.warn(arguments);\n      }\n\n      function error() {\n        // var args = _getEnhancedArguments(arguments);\n        // console.error(arguments);\n      }\n\n      function getLogType(logType) {\n        return _logTypes[logType];\n      }\n    }\n\n    function enhance(logTypes) {\n      try {\n        if(angular.isDefined(logTypes) && logTypes !== null && !angular.isString(logTypes)) {\n          throw 'Wrong argument type. The argument \"logTypes\" should be a comma seperated String.';\n        }\n      } catch(error) {\n        return error;\n      }\n\n      var logTypesArray = [];\n\n      // Set enhanced\n      if(angular.isString(logTypes)) {\n        logTypesArray = logTypes.replace(/\\s+/g, '').split(',');\n\n        // Initialize all log types with enhanced = false\n        angular.forEach(_logTypes, function(_logType) {\n          _logType.enhanced = false;\n        });\n\n        // Set defined enhanced values for log types\n        angular.forEach(logTypesArray, function(logType) {\n          if(angular.isDefined(_logTypes[logType])) {\n            _logTypes[logType].enhanced = true;\n          }\n        });\n      } else {\n        // If logTypes is undefined or null\n        // Initialize all log types with enhanced = true\n        angular.forEach(_logTypes, function(_logType) {\n          _logType.enhanced = true;\n        });\n      }\n    }\n\n    function before(logTypes, hooks) {\n      _addHooks('pre', logTypes, hooks);\n    }\n\n    function after(logTypes, hooks) {\n      _addHooks('post', logTypes, hooks);\n    }\n\n    function decorate(message) {\n\n    }\n  }\n\n}());\n","/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n *                                                                                     *\n * Copyright (C) 2015 Lukas Mayerhofer <lukas.mayerhofer@guh.guru>                     *\n *                                                                                     *\n * Permission is hereby granted, free of charge, to any person obtaining a copy        *\n * of this software and associated documentation files (the \"Software\"), to deal       *\n * in the Software without restriction, including without limitation the rights        *\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell           *\n * copies of the Software, and to permit persons to whom the Software is               *\n * furnished to do so, subject to the following conditions:                            *\n *                                                                                     *\n * The above copyright notice and this permission notice shall be included in all      *\n * copies or substantial portions of the Software.                                     *\n *                                                                                     *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR          *\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,            *\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE         *\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER              *\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,       *\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE       *\n * SOFTWARE.                                                                           *\n *                                                                                     *\n * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */\n\n(function() {\n  'use strict';\n\n  angular\n    .module('guh.api', [])\n    .config(config);\n\n  config.$inject = [];\n\n  function config() {}\n\n}());","/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n *                                                                                     *\n * Copyright (C) 2015 Lukas Mayerhofer <lukas.mayerhofer@guh.guru>                     *\n *                                                                                     *\n * Permission is hereby granted, free of charge, to any person obtaining a copy        *\n * of this software and associated documentation files (the \"Software\"), to deal       *\n * in the Software without restriction, including without limitation the rights        *\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell           *\n * copies of the Software, and to permit persons to whom the Software is               *\n * furnished to do so, subject to the following conditions:                            *\n *                                                                                     *\n * The above copyright notice and this permission notice shall be included in all      *\n * copies or substantial portions of the Software.                                     *\n *                                                                                     *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR          *\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,            *\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE         *\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER              *\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,       *\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE       *\n * SOFTWARE.                                                                           *\n *                                                                                     *\n * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */\n\n(function() {\n  'use strict';\n\n  angular\n    .module('guh.api')\n    .factory('websocketService', websocketService);\n\n  websocketService.$inject = ['$log', '$rootScope', 'libs', 'app', 'DS', 'DSHttpAdapter'];\n\n  function websocketService($log, $rootScope, libs, app, DS, DSHttpAdapter) {\n\n    var websocketService = {\n      // Data\n      ws: null,\n      callbacks: {},\n\n      // Methods\n      close: close,\n      connect: connect,\n      reconnect: reconnect,\n      subscribe: subscribe,\n      unsubscribe: unsubscribe\n    };\n\n    return websocketService;\n\n\n    /*\n     * Public method: close()\n     */\n    function close() {\n      if(websocketService.ws) {\n        websocketService.ws = null;\n      }\n    }\n\n    /*\n     * Public method: connect()\n     */\n    function connect() {\n      $log.log('Connect to websocket.');\n\n      if(websocketService.ws) {\n        return;\n      }\n\n      var ws = new WebSocket(app.websocketUrl);\n\n      ws.onopen = function(event) {\n        $log.log('Successfully connected with websocket.', ws, event);\n\n        // Send broadcast event\n        $rootScope.$apply(function() {\n          $rootScope.$broadcast('WebsocketConnected', 'Successful connected to guh.');\n        });\n      };\n\n      ws.onclose = function(event) {\n        $log.log('Closed websocket connection.', ws, event);\n\n        // Send broadcast event\n        $rootScope.$apply(function() {\n          $rootScope.$broadcast('WebsocketConnectionLost', 'The app has lost the connection to guh. Please check if you are connected to your network and if guh is running correctly.');\n        });\n      };\n\n      ws.onerror = function() {\n        $log.error('There was an error with the websocket connection.');\n\n        // Send broadcast event\n        $rootScope.$apply(function() {\n          $rootScope.$broadcast('WebsocketConnectionError', 'There was an error connecting to guh.');\n        });\n      };\n\n      ws.onmessage = function(message) {\n        $log.log('onmessage', message);\n        var data = angular.fromJson(message.data);\n\n        switch(data.notification) {\n          // Devices.StateChanged\n          case app.notificationTypes.devices.stateChanged:\n            var deviceId = data.params.deviceId;\n            var stateTypeId = data.params.stateTypeId;\n            var value = data.params.value;\n\n            DS.inject('state', {\n              id: '' + deviceId + '_' + stateTypeId,\n              deviceId: deviceId,\n              stateTypeId: stateTypeId,\n              value: value\n            });\n            break;\n\n          // Devices.DeviceAdded\n          case app.notificationTypes.devices.deviceAdded:\n            $log.log('Device added', data);\n\n            var deviceId = data.params.device.id;\n            var device = DS.get('device', deviceId);\n\n            if(angular.isUndefined(device)) {\n              var deviceData = data.params.device;\n\n              $log.log('Insert new device.');\n              DSHttpAdapter\n                .GET(app.apiUrl + '/devices/' + deviceId + '/states')\n                .then(function(response) {\n                  var states = response.data;\n\n                  var injectedItem = DS.inject('device', {\n                    deviceClassId: deviceData.deviceClassId,\n                    id: deviceData.id,\n                    name: deviceData.name,\n                    params: deviceData.params,\n                    setupComplete: deviceData.setupComplete,\n                    states: states\n                  });\n\n                  $log.log('injectedItem', injectedItem);\n\n                  // Send broadcast event\n                  if(DS.is('device', injectedItem)) {\n                    $rootScope.$broadcast('ReloadView', injectedItem.deviceClass.name + ' was added.');\n                  }\n                });            \n            } else {\n              $log.log('Device already inserted.');\n            }\n\n            break;\n\n          // Devices.DeviceRemoved\n          case app.notificationTypes.devices.deviceRemoved:\n            $log.log('Device removed', data);\n\n            var deviceId = data.params.deviceId;\n            var ejectedItem = DS.eject('device', deviceId);\n\n            if(angular.isDefined(ejectedItem)) {\n              // Send broadcast event\n              $rootScope.$broadcast('ReloadView', 'Device was removed.');\n            } else {\n              $log.log('Device not found, removing not possible.')\n            }\n\n            break;\n\n          default:\n            $log.warn('Type of notification not handled:', data);\n        }\n\n        // if(data.notification === app.notificationTypes.devices.stateChanged) {\n        //   $log.log('Device state changed.', data);\n\n        //   $log.log('websocketService.callbacks', websocketService.callbacks);\n        //   $log.log('data.params.deviceId', data.params.deviceId);\n\n        //   // Execute callback-function with right ID\n        //   if(libs._.has(websocketService.callbacks, data.params.deviceId)) {\n        //     var cb = websocketService.callbacks[data.params.deviceId];\n        //     cb(data);\n        //   }\n        // } else {\n        //   // $log.warn('Type of notification not handled:' + data.notification);\n        //   $log.warn('Type of notification not handled:', data);\n        // }\n      };\n\n      websocketService.ws = ws;\n    }\n\n    /*\n     * Public method: reconnect()\n     */\n    function reconnect() {\n      websocketService.close();\n      websocketService.connect();\n    }\n\n    /*\n     * Public method: subscribe(id, cb)\n     */\n    function subscribe(id, cb) {\n      $log.log('Subscribe to websocket.');\n\n      if(!websocketService.ws) {\n        websocketService.connect();\n      }\n\n      websocketService.callbacks[id] = cb;\n    }\n\n    /*\n     * Public method: unsubscribe(id)\n     */\n    function unsubscribe(id) {\n      $log.log('Unsubscribe from websocket.', id);\n      delete websocketService.callbacks[id];\n    }\n\n  }\n\n}());"],"sourceRoot":"/source/"}